// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zwift_messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zwift_5fmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zwift_5fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zwift_5fmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zwift_5fmessages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zwift_5fmessages_2eproto;
class ClientToServer;
struct ClientToServerDefaultTypeInternal;
extern ClientToServerDefaultTypeInternal _ClientToServer_default_instance_;
class EventSubgroupProtobuf;
struct EventSubgroupProtobufDefaultTypeInternal;
extern EventSubgroupProtobufDefaultTypeInternal _EventSubgroupProtobuf_default_instance_;
class PlayerState;
struct PlayerStateDefaultTypeInternal;
extern PlayerStateDefaultTypeInternal _PlayerState_default_instance_;
class Profile;
struct ProfileDefaultTypeInternal;
extern ProfileDefaultTypeInternal _Profile_default_instance_;
class Profiles;
struct ProfilesDefaultTypeInternal;
extern ProfilesDefaultTypeInternal _Profiles_default_instance_;
class RiderAttributes;
struct RiderAttributesDefaultTypeInternal;
extern RiderAttributesDefaultTypeInternal _RiderAttributes_default_instance_;
class RiderAttributes_AttributeMessage;
struct RiderAttributes_AttributeMessageDefaultTypeInternal;
extern RiderAttributes_AttributeMessageDefaultTypeInternal _RiderAttributes_AttributeMessage_default_instance_;
class SegmentResult;
struct SegmentResultDefaultTypeInternal;
extern SegmentResultDefaultTypeInternal _SegmentResult_default_instance_;
class SegmentResults;
struct SegmentResultsDefaultTypeInternal;
extern SegmentResultsDefaultTypeInternal _SegmentResults_default_instance_;
class ServerToClient;
struct ServerToClientDefaultTypeInternal;
extern ServerToClientDefaultTypeInternal _ServerToClient_default_instance_;
class UnknownMessage;
struct UnknownMessageDefaultTypeInternal;
extern UnknownMessageDefaultTypeInternal _UnknownMessage_default_instance_;
class UnknownMessage1;
struct UnknownMessage1DefaultTypeInternal;
extern UnknownMessage1DefaultTypeInternal _UnknownMessage1_default_instance_;
class WorldAttribute;
struct WorldAttributeDefaultTypeInternal;
extern WorldAttributeDefaultTypeInternal _WorldAttribute_default_instance_;
class WorldAttributes;
struct WorldAttributesDefaultTypeInternal;
extern WorldAttributesDefaultTypeInternal _WorldAttributes_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClientToServer* Arena::CreateMaybeMessage<::ClientToServer>(Arena*);
template<> ::EventSubgroupProtobuf* Arena::CreateMaybeMessage<::EventSubgroupProtobuf>(Arena*);
template<> ::PlayerState* Arena::CreateMaybeMessage<::PlayerState>(Arena*);
template<> ::Profile* Arena::CreateMaybeMessage<::Profile>(Arena*);
template<> ::Profiles* Arena::CreateMaybeMessage<::Profiles>(Arena*);
template<> ::RiderAttributes* Arena::CreateMaybeMessage<::RiderAttributes>(Arena*);
template<> ::RiderAttributes_AttributeMessage* Arena::CreateMaybeMessage<::RiderAttributes_AttributeMessage>(Arena*);
template<> ::SegmentResult* Arena::CreateMaybeMessage<::SegmentResult>(Arena*);
template<> ::SegmentResults* Arena::CreateMaybeMessage<::SegmentResults>(Arena*);
template<> ::ServerToClient* Arena::CreateMaybeMessage<::ServerToClient>(Arena*);
template<> ::UnknownMessage* Arena::CreateMaybeMessage<::UnknownMessage>(Arena*);
template<> ::UnknownMessage1* Arena::CreateMaybeMessage<::UnknownMessage1>(Arena*);
template<> ::WorldAttribute* Arena::CreateMaybeMessage<::WorldAttribute>(Arena*);
template<> ::WorldAttributes* Arena::CreateMaybeMessage<::WorldAttributes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PlayerState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerState) */ {
 public:
  inline PlayerState() : PlayerState(nullptr) {}
  ~PlayerState() override;
  explicit PROTOBUF_CONSTEXPR PlayerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerState(const PlayerState& from);
  PlayerState(PlayerState&& from) noexcept
    : PlayerState() {
    *this = ::std::move(from);
  }

  inline PlayerState& operator=(const PlayerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerState& operator=(PlayerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerState* internal_default_instance() {
    return reinterpret_cast<const PlayerState*>(
               &_PlayerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerState& a, PlayerState& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerState& from) {
    PlayerState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerState";
  }
  protected:
  explicit PlayerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldTimeFieldNumber = 2,
    kIdFieldNumber = 1,
    kDistanceFieldNumber = 3,
    kRoadTimeFieldNumber = 4,
    kLapsFieldNumber = 5,
    kSpeedFieldNumber = 6,
    kRoadPositionFieldNumber = 8,
    kCadenceUHzFieldNumber = 9,
    kHeartrateFieldNumber = 11,
    kHeadingFieldNumber = 13,
    kPowerFieldNumber = 12,
    kLeanFieldNumber = 14,
    kClimbingFieldNumber = 15,
    kTimeFieldNumber = 16,
    kF19FieldNumber = 19,
    kF20FieldNumber = 20,
    kCustomisationIdFieldNumber = 22,
    kProgressFieldNumber = 21,
    kJustWatchingFieldNumber = 23,
    kCaloriesFieldNumber = 24,
    kXFieldNumber = 25,
    kAltitudeFieldNumber = 26,
    kYFieldNumber = 27,
    kWatchingRiderIdFieldNumber = 28,
    kGroupIdFieldNumber = 29,
    kSportFieldNumber = 31,
  };
  // int64 worldTime = 2;
  void clear_worldtime();
  int64_t worldtime() const;
  void set_worldtime(int64_t value);
  private:
  int64_t _internal_worldtime() const;
  void _internal_set_worldtime(int64_t value);
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 distance = 3;
  void clear_distance();
  int32_t distance() const;
  void set_distance(int32_t value);
  private:
  int32_t _internal_distance() const;
  void _internal_set_distance(int32_t value);
  public:

  // int32 roadTime = 4;
  void clear_roadtime();
  int32_t roadtime() const;
  void set_roadtime(int32_t value);
  private:
  int32_t _internal_roadtime() const;
  void _internal_set_roadtime(int32_t value);
  public:

  // int32 laps = 5;
  void clear_laps();
  int32_t laps() const;
  void set_laps(int32_t value);
  private:
  int32_t _internal_laps() const;
  void _internal_set_laps(int32_t value);
  public:

  // int32 speed = 6;
  void clear_speed();
  int32_t speed() const;
  void set_speed(int32_t value);
  private:
  int32_t _internal_speed() const;
  void _internal_set_speed(int32_t value);
  public:

  // int32 roadPosition = 8;
  void clear_roadposition();
  int32_t roadposition() const;
  void set_roadposition(int32_t value);
  private:
  int32_t _internal_roadposition() const;
  void _internal_set_roadposition(int32_t value);
  public:

  // int32 cadenceUHz = 9;
  void clear_cadenceuhz();
  int32_t cadenceuhz() const;
  void set_cadenceuhz(int32_t value);
  private:
  int32_t _internal_cadenceuhz() const;
  void _internal_set_cadenceuhz(int32_t value);
  public:

  // int32 heartrate = 11;
  void clear_heartrate();
  int32_t heartrate() const;
  void set_heartrate(int32_t value);
  private:
  int32_t _internal_heartrate() const;
  void _internal_set_heartrate(int32_t value);
  public:

  // int64 heading = 13;
  void clear_heading();
  int64_t heading() const;
  void set_heading(int64_t value);
  private:
  int64_t _internal_heading() const;
  void _internal_set_heading(int64_t value);
  public:

  // int32 power = 12;
  void clear_power();
  int32_t power() const;
  void set_power(int32_t value);
  private:
  int32_t _internal_power() const;
  void _internal_set_power(int32_t value);
  public:

  // int32 lean = 14;
  void clear_lean();
  int32_t lean() const;
  void set_lean(int32_t value);
  private:
  int32_t _internal_lean() const;
  void _internal_set_lean(int32_t value);
  public:

  // int32 climbing = 15;
  void clear_climbing();
  int32_t climbing() const;
  void set_climbing(int32_t value);
  private:
  int32_t _internal_climbing() const;
  void _internal_set_climbing(int32_t value);
  public:

  // int32 time = 16;
  void clear_time();
  int32_t time() const;
  void set_time(int32_t value);
  private:
  int32_t _internal_time() const;
  void _internal_set_time(int32_t value);
  public:

  // int32 f19 = 19;
  void clear_f19();
  int32_t f19() const;
  void set_f19(int32_t value);
  private:
  int32_t _internal_f19() const;
  void _internal_set_f19(int32_t value);
  public:

  // int32 f20 = 20;
  void clear_f20();
  int32_t f20() const;
  void set_f20(int32_t value);
  private:
  int32_t _internal_f20() const;
  void _internal_set_f20(int32_t value);
  public:

  // int64 customisationId = 22;
  void clear_customisationid();
  int64_t customisationid() const;
  void set_customisationid(int64_t value);
  private:
  int64_t _internal_customisationid() const;
  void _internal_set_customisationid(int64_t value);
  public:

  // int32 progress = 21;
  void clear_progress();
  int32_t progress() const;
  void set_progress(int32_t value);
  private:
  int32_t _internal_progress() const;
  void _internal_set_progress(int32_t value);
  public:

  // int32 justWatching = 23;
  void clear_justwatching();
  int32_t justwatching() const;
  void set_justwatching(int32_t value);
  private:
  int32_t _internal_justwatching() const;
  void _internal_set_justwatching(int32_t value);
  public:

  // int32 calories = 24;
  void clear_calories();
  int32_t calories() const;
  void set_calories(int32_t value);
  private:
  int32_t _internal_calories() const;
  void _internal_set_calories(int32_t value);
  public:

  // float x = 25;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float altitude = 26;
  void clear_altitude();
  float altitude() const;
  void set_altitude(float value);
  private:
  float _internal_altitude() const;
  void _internal_set_altitude(float value);
  public:

  // float y = 27;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // int32 watchingRiderId = 28;
  void clear_watchingriderid();
  int32_t watchingriderid() const;
  void set_watchingriderid(int32_t value);
  private:
  int32_t _internal_watchingriderid() const;
  void _internal_set_watchingriderid(int32_t value);
  public:

  // int32 groupId = 29;
  void clear_groupid();
  int32_t groupid() const;
  void set_groupid(int32_t value);
  private:
  int32_t _internal_groupid() const;
  void _internal_set_groupid(int32_t value);
  public:

  // int64 sport = 31;
  void clear_sport();
  int64_t sport() const;
  void set_sport(int64_t value);
  private:
  int64_t _internal_sport() const;
  void _internal_set_sport(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t worldtime_;
    int32_t id_;
    int32_t distance_;
    int32_t roadtime_;
    int32_t laps_;
    int32_t speed_;
    int32_t roadposition_;
    int32_t cadenceuhz_;
    int32_t heartrate_;
    int64_t heading_;
    int32_t power_;
    int32_t lean_;
    int32_t climbing_;
    int32_t time_;
    int32_t f19_;
    int32_t f20_;
    int64_t customisationid_;
    int32_t progress_;
    int32_t justwatching_;
    int32_t calories_;
    float x_;
    float altitude_;
    float y_;
    int32_t watchingriderid_;
    int32_t groupid_;
    int64_t sport_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zwift_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class ClientToServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientToServer) */ {
 public:
  inline ClientToServer() : ClientToServer(nullptr) {}
  ~ClientToServer() override;
  explicit PROTOBUF_CONSTEXPR ClientToServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientToServer(const ClientToServer& from);
  ClientToServer(ClientToServer&& from) noexcept
    : ClientToServer() {
    *this = ::std::move(from);
  }

  inline ClientToServer& operator=(const ClientToServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientToServer& operator=(ClientToServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientToServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientToServer* internal_default_instance() {
    return reinterpret_cast<const ClientToServer*>(
               &_ClientToServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientToServer& a, ClientToServer& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientToServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientToServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientToServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientToServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientToServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientToServer& from) {
    ClientToServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientToServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientToServer";
  }
  protected:
  explicit ClientToServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 7,
    kConnectedFieldNumber = 1,
    kRiderIdFieldNumber = 2,
    kWorldTimeFieldNumber = 3,
    kTag8FieldNumber = 8,
    kTag9FieldNumber = 9,
    kLastUpdateFieldNumber = 10,
    kTag11FieldNumber = 11,
    kLastPlayerUpdateFieldNumber = 12,
    kSeqnoFieldNumber = 4,
  };
  // .PlayerState state = 7;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::PlayerState& state() const;
  PROTOBUF_NODISCARD ::PlayerState* release_state();
  ::PlayerState* mutable_state();
  void set_allocated_state(::PlayerState* state);
  private:
  const ::PlayerState& _internal_state() const;
  ::PlayerState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::PlayerState* state);
  ::PlayerState* unsafe_arena_release_state();

  // int32 connected = 1;
  void clear_connected();
  int32_t connected() const;
  void set_connected(int32_t value);
  private:
  int32_t _internal_connected() const;
  void _internal_set_connected(int32_t value);
  public:

  // int32 rider_id = 2;
  void clear_rider_id();
  int32_t rider_id() const;
  void set_rider_id(int32_t value);
  private:
  int32_t _internal_rider_id() const;
  void _internal_set_rider_id(int32_t value);
  public:

  // int64 world_time = 3;
  void clear_world_time();
  int64_t world_time() const;
  void set_world_time(int64_t value);
  private:
  int64_t _internal_world_time() const;
  void _internal_set_world_time(int64_t value);
  public:

  // int64 tag8 = 8;
  void clear_tag8();
  int64_t tag8() const;
  void set_tag8(int64_t value);
  private:
  int64_t _internal_tag8() const;
  void _internal_set_tag8(int64_t value);
  public:

  // int64 tag9 = 9;
  void clear_tag9();
  int64_t tag9() const;
  void set_tag9(int64_t value);
  private:
  int64_t _internal_tag9() const;
  void _internal_set_tag9(int64_t value);
  public:

  // int64 last_update = 10;
  void clear_last_update();
  int64_t last_update() const;
  void set_last_update(int64_t value);
  private:
  int64_t _internal_last_update() const;
  void _internal_set_last_update(int64_t value);
  public:

  // int64 tag11 = 11;
  void clear_tag11();
  int64_t tag11() const;
  void set_tag11(int64_t value);
  private:
  int64_t _internal_tag11() const;
  void _internal_set_tag11(int64_t value);
  public:

  // int64 last_player_update = 12;
  void clear_last_player_update();
  int64_t last_player_update() const;
  void set_last_player_update(int64_t value);
  private:
  int64_t _internal_last_player_update() const;
  void _internal_set_last_player_update(int64_t value);
  public:

  // int32 seqno = 4;
  void clear_seqno();
  int32_t seqno() const;
  void set_seqno(int32_t value);
  private:
  int32_t _internal_seqno() const;
  void _internal_set_seqno(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ClientToServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PlayerState* state_;
    int32_t connected_;
    int32_t rider_id_;
    int64_t world_time_;
    int64_t tag8_;
    int64_t tag9_;
    int64_t last_update_;
    int64_t tag11_;
    int64_t last_player_update_;
    int32_t seqno_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zwift_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class SegmentResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SegmentResult) */ {
 public:
  inline SegmentResult() : SegmentResult(nullptr) {}
  ~SegmentResult() override;
  explicit PROTOBUF_CONSTEXPR SegmentResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegmentResult(const SegmentResult& from);
  SegmentResult(SegmentResult&& from) noexcept
    : SegmentResult() {
    *this = ::std::move(from);
  }

  inline SegmentResult& operator=(const SegmentResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentResult& operator=(SegmentResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegmentResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentResult* internal_default_instance() {
    return reinterpret_cast<const SegmentResult*>(
               &_SegmentResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SegmentResult& a, SegmentResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SegmentResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SegmentResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SegmentResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SegmentResult& from) {
    SegmentResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SegmentResult";
  }
  protected:
  explicit SegmentResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 7,
    kLastNameFieldNumber = 8,
    kFinishTimeStrFieldNumber = 10,
    kIdFieldNumber = 1,
    kRiderIdFieldNumber = 2,
    kEventSubgroupIdFieldNumber = 6,
    kElapsedMsFieldNumber = 11,
    kPowermeterFieldNumber = 12,
    kWeightFieldNumber = 13,
    kPowerFieldNumber = 15,
    kHeartrateFieldNumber = 19,
  };
  // string first_name = 7;
  void clear_first_name();
  const std::string& first_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_first_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_first_name();
  PROTOBUF_NODISCARD std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 8;
  void clear_last_name();
  const std::string& last_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_name();
  PROTOBUF_NODISCARD std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string finish_time_str = 10;
  void clear_finish_time_str();
  const std::string& finish_time_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_finish_time_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_finish_time_str();
  PROTOBUF_NODISCARD std::string* release_finish_time_str();
  void set_allocated_finish_time_str(std::string* finish_time_str);
  private:
  const std::string& _internal_finish_time_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_finish_time_str(const std::string& value);
  std::string* _internal_mutable_finish_time_str();
  public:

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int64 rider_id = 2;
  void clear_rider_id();
  int64_t rider_id() const;
  void set_rider_id(int64_t value);
  private:
  int64_t _internal_rider_id() const;
  void _internal_set_rider_id(int64_t value);
  public:

  // int64 event_subgroup_id = 6;
  void clear_event_subgroup_id();
  int64_t event_subgroup_id() const;
  void set_event_subgroup_id(int64_t value);
  private:
  int64_t _internal_event_subgroup_id() const;
  void _internal_set_event_subgroup_id(int64_t value);
  public:

  // int64 elapsed_ms = 11;
  void clear_elapsed_ms();
  int64_t elapsed_ms() const;
  void set_elapsed_ms(int64_t value);
  private:
  int64_t _internal_elapsed_ms() const;
  void _internal_set_elapsed_ms(int64_t value);
  public:

  // int32 powermeter = 12;
  void clear_powermeter();
  int32_t powermeter() const;
  void set_powermeter(int32_t value);
  private:
  int32_t _internal_powermeter() const;
  void _internal_set_powermeter(int32_t value);
  public:

  // int32 weight = 13;
  void clear_weight();
  int32_t weight() const;
  void set_weight(int32_t value);
  private:
  int32_t _internal_weight() const;
  void _internal_set_weight(int32_t value);
  public:

  // int32 power = 15;
  void clear_power();
  int32_t power() const;
  void set_power(int32_t value);
  private:
  int32_t _internal_power() const;
  void _internal_set_power(int32_t value);
  public:

  // int32 heartrate = 19;
  void clear_heartrate();
  int32_t heartrate() const;
  void set_heartrate(int32_t value);
  private:
  int32_t _internal_heartrate() const;
  void _internal_set_heartrate(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SegmentResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr finish_time_str_;
    int64_t id_;
    int64_t rider_id_;
    int64_t event_subgroup_id_;
    int64_t elapsed_ms_;
    int32_t powermeter_;
    int32_t weight_;
    int32_t power_;
    int32_t heartrate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zwift_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class SegmentResults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SegmentResults) */ {
 public:
  inline SegmentResults() : SegmentResults(nullptr) {}
  ~SegmentResults() override;
  explicit PROTOBUF_CONSTEXPR SegmentResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SegmentResults(const SegmentResults& from);
  SegmentResults(SegmentResults&& from) noexcept
    : SegmentResults() {
    *this = ::std::move(from);
  }

  inline SegmentResults& operator=(const SegmentResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentResults& operator=(SegmentResults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegmentResults& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentResults* internal_default_instance() {
    return reinterpret_cast<const SegmentResults*>(
               &_SegmentResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SegmentResults& a, SegmentResults& b) {
    a.Swap(&b);
  }
  inline void Swap(SegmentResults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SegmentResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SegmentResults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SegmentResults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SegmentResults& from) {
    SegmentResults::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SegmentResults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SegmentResults";
  }
  protected:
  explicit SegmentResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentResultsFieldNumber = 4,
    kWorldIdFieldNumber = 1,
    kSegmentIdFieldNumber = 2,
    kEventSubgroupIdFieldNumber = 3,
  };
  // repeated .SegmentResult segment_results = 4;
  int segment_results_size() const;
  private:
  int _internal_segment_results_size() const;
  public:
  void clear_segment_results();
  ::SegmentResult* mutable_segment_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SegmentResult >*
      mutable_segment_results();
  private:
  const ::SegmentResult& _internal_segment_results(int index) const;
  ::SegmentResult* _internal_add_segment_results();
  public:
  const ::SegmentResult& segment_results(int index) const;
  ::SegmentResult* add_segment_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SegmentResult >&
      segment_results() const;

  // int64 world_id = 1;
  void clear_world_id();
  int64_t world_id() const;
  void set_world_id(int64_t value);
  private:
  int64_t _internal_world_id() const;
  void _internal_set_world_id(int64_t value);
  public:

  // int64 segment_id = 2;
  void clear_segment_id();
  int64_t segment_id() const;
  void set_segment_id(int64_t value);
  private:
  int64_t _internal_segment_id() const;
  void _internal_set_segment_id(int64_t value);
  public:

  // int64 event_subgroup_id = 3;
  void clear_event_subgroup_id();
  int64_t event_subgroup_id() const;
  void set_event_subgroup_id(int64_t value);
  private:
  int64_t _internal_event_subgroup_id() const;
  void _internal_set_event_subgroup_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:SegmentResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SegmentResult > segment_results_;
    int64_t world_id_;
    int64_t segment_id_;
    int64_t event_subgroup_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zwift_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class UnknownMessage1 final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:UnknownMessage1) */ {
 public:
  inline UnknownMessage1() : UnknownMessage1(nullptr) {}
  explicit PROTOBUF_CONSTEXPR UnknownMessage1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnknownMessage1(const UnknownMessage1& from);
  UnknownMessage1(UnknownMessage1&& from) noexcept
    : UnknownMessage1() {
    *this = ::std::move(from);
  }

  inline UnknownMessage1& operator=(const UnknownMessage1& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnknownMessage1& operator=(UnknownMessage1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnknownMessage1& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnknownMessage1* internal_default_instance() {
    return reinterpret_cast<const UnknownMessage1*>(
               &_UnknownMessage1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UnknownMessage1& a, UnknownMessage1& b) {
    a.Swap(&b);
  }
  inline void Swap(UnknownMessage1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnknownMessage1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnknownMessage1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnknownMessage1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UnknownMessage1& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UnknownMessage1& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnknownMessage1";
  }
  protected:
  explicit UnknownMessage1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:UnknownMessage1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_zwift_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class UnknownMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:UnknownMessage) */ {
 public:
  inline UnknownMessage() : UnknownMessage(nullptr) {}
  explicit PROTOBUF_CONSTEXPR UnknownMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnknownMessage(const UnknownMessage& from);
  UnknownMessage(UnknownMessage&& from) noexcept
    : UnknownMessage() {
    *this = ::std::move(from);
  }

  inline UnknownMessage& operator=(const UnknownMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnknownMessage& operator=(UnknownMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnknownMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnknownMessage* internal_default_instance() {
    return reinterpret_cast<const UnknownMessage*>(
               &_UnknownMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UnknownMessage& a, UnknownMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UnknownMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnknownMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnknownMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnknownMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UnknownMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UnknownMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UnknownMessage";
  }
  protected:
  explicit UnknownMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:UnknownMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_zwift_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class ServerToClient final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerToClient) */ {
 public:
  inline ServerToClient() : ServerToClient(nullptr) {}
  ~ServerToClient() override;
  explicit PROTOBUF_CONSTEXPR ServerToClient(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerToClient(const ServerToClient& from);
  ServerToClient(ServerToClient&& from) noexcept
    : ServerToClient() {
    *this = ::std::move(from);
  }

  inline ServerToClient& operator=(const ServerToClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerToClient& operator=(ServerToClient&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerToClient& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerToClient* internal_default_instance() {
    return reinterpret_cast<const ServerToClient*>(
               &_ServerToClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ServerToClient& a, ServerToClient& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerToClient* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerToClient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerToClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerToClient>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerToClient& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerToClient& from) {
    ServerToClient::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerToClient* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerToClient";
  }
  protected:
  explicit ServerToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerStatesFieldNumber = 8,
    kPlayerUpdatesFieldNumber = 9,
    kTag1FieldNumber = 1,
    kRiderIdFieldNumber = 2,
    kWorldTimeFieldNumber = 3,
    kTag11FieldNumber = 11,
    kSeqnoFieldNumber = 4,
    kNumMsgsFieldNumber = 18,
    kTag17FieldNumber = 17,
    kMsgnumFieldNumber = 19,
  };
  // repeated .PlayerState player_states = 8;
  int player_states_size() const;
  private:
  int _internal_player_states_size() const;
  public:
  void clear_player_states();
  ::PlayerState* mutable_player_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerState >*
      mutable_player_states();
  private:
  const ::PlayerState& _internal_player_states(int index) const;
  ::PlayerState* _internal_add_player_states();
  public:
  const ::PlayerState& player_states(int index) const;
  ::PlayerState* add_player_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerState >&
      player_states() const;

  // repeated .UnknownMessage player_updates = 9;
  int player_updates_size() const;
  private:
  int _internal_player_updates_size() const;
  public:
  void clear_player_updates();
  ::UnknownMessage* mutable_player_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnknownMessage >*
      mutable_player_updates();
  private:
  const ::UnknownMessage& _internal_player_updates(int index) const;
  ::UnknownMessage* _internal_add_player_updates();
  public:
  const ::UnknownMessage& player_updates(int index) const;
  ::UnknownMessage* add_player_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnknownMessage >&
      player_updates() const;

  // int32 tag1 = 1;
  void clear_tag1();
  int32_t tag1() const;
  void set_tag1(int32_t value);
  private:
  int32_t _internal_tag1() const;
  void _internal_set_tag1(int32_t value);
  public:

  // int32 rider_id = 2;
  void clear_rider_id();
  int32_t rider_id() const;
  void set_rider_id(int32_t value);
  private:
  int32_t _internal_rider_id() const;
  void _internal_set_rider_id(int32_t value);
  public:

  // int64 world_time = 3;
  void clear_world_time();
  int64_t world_time() const;
  void set_world_time(int64_t value);
  private:
  int64_t _internal_world_time() const;
  void _internal_set_world_time(int64_t value);
  public:

  // int64 tag11 = 11;
  void clear_tag11();
  int64_t tag11() const;
  void set_tag11(int64_t value);
  private:
  int64_t _internal_tag11() const;
  void _internal_set_tag11(int64_t value);
  public:

  // int32 seqno = 4;
  void clear_seqno();
  int32_t seqno() const;
  void set_seqno(int32_t value);
  private:
  int32_t _internal_seqno() const;
  void _internal_set_seqno(int32_t value);
  public:

  // int32 num_msgs = 18;
  void clear_num_msgs();
  int32_t num_msgs() const;
  void set_num_msgs(int32_t value);
  private:
  int32_t _internal_num_msgs() const;
  void _internal_set_num_msgs(int32_t value);
  public:

  // int64 tag17 = 17;
  void clear_tag17();
  int64_t tag17() const;
  void set_tag17(int64_t value);
  private:
  int64_t _internal_tag17() const;
  void _internal_set_tag17(int64_t value);
  public:

  // int32 msgnum = 19;
  void clear_msgnum();
  int32_t msgnum() const;
  void set_msgnum(int32_t value);
  private:
  int32_t _internal_msgnum() const;
  void _internal_set_msgnum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ServerToClient)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerState > player_states_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnknownMessage > player_updates_;
    int32_t tag1_;
    int32_t rider_id_;
    int64_t world_time_;
    int64_t tag11_;
    int32_t seqno_;
    int32_t num_msgs_;
    int64_t tag17_;
    int32_t msgnum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zwift_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class WorldAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorldAttributes) */ {
 public:
  inline WorldAttributes() : WorldAttributes(nullptr) {}
  ~WorldAttributes() override;
  explicit PROTOBUF_CONSTEXPR WorldAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorldAttributes(const WorldAttributes& from);
  WorldAttributes(WorldAttributes&& from) noexcept
    : WorldAttributes() {
    *this = ::std::move(from);
  }

  inline WorldAttributes& operator=(const WorldAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldAttributes& operator=(WorldAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorldAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorldAttributes* internal_default_instance() {
    return reinterpret_cast<const WorldAttributes*>(
               &_WorldAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WorldAttributes& a, WorldAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorldAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorldAttributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorldAttributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WorldAttributes& from) {
    WorldAttributes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorldAttributes";
  }
  protected:
  explicit WorldAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTag3FieldNumber = 3,
    kTag5FieldNumber = 4,
    kWorldTimeFieldNumber = 6,
    kClockTimeFieldNumber = 7,
    kWorldIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 tag3 = 3;
  void clear_tag3();
  int64_t tag3() const;
  void set_tag3(int64_t value);
  private:
  int64_t _internal_tag3() const;
  void _internal_set_tag3(int64_t value);
  public:

  // int64 tag5 = 4;
  void clear_tag5();
  int64_t tag5() const;
  void set_tag5(int64_t value);
  private:
  int64_t _internal_tag5() const;
  void _internal_set_tag5(int64_t value);
  public:

  // int64 world_time = 6;
  void clear_world_time();
  int64_t world_time() const;
  void set_world_time(int64_t value);
  private:
  int64_t _internal_world_time() const;
  void _internal_set_world_time(int64_t value);
  public:

  // int64 clock_time = 7;
  void clear_clock_time();
  int64_t clock_time() const;
  void set_clock_time(int64_t value);
  private:
  int64_t _internal_clock_time() const;
  void _internal_set_clock_time(int64_t value);
  public:

  // int32 world_id = 1;
  void clear_world_id();
  int32_t world_id() const;
  void set_world_id(int32_t value);
  private:
  int32_t _internal_world_id() const;
  void _internal_set_world_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:WorldAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int64_t tag3_;
    int64_t tag5_;
    int64_t world_time_;
    int64_t clock_time_;
    int32_t world_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zwift_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class WorldAttribute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorldAttribute) */ {
 public:
  inline WorldAttribute() : WorldAttribute(nullptr) {}
  ~WorldAttribute() override;
  explicit PROTOBUF_CONSTEXPR WorldAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorldAttribute(const WorldAttribute& from);
  WorldAttribute(WorldAttribute&& from) noexcept
    : WorldAttribute() {
    *this = ::std::move(from);
  }

  inline WorldAttribute& operator=(const WorldAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldAttribute& operator=(WorldAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorldAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorldAttribute* internal_default_instance() {
    return reinterpret_cast<const WorldAttribute*>(
               &_WorldAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WorldAttribute& a, WorldAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldAttribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorldAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorldAttribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorldAttribute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WorldAttribute& from) {
    WorldAttribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldAttribute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorldAttribute";
  }
  protected:
  explicit WorldAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldTimeFieldNumber = 2,
  };
  // int64 world_time = 2;
  void clear_world_time();
  int64_t world_time() const;
  void set_world_time(int64_t value);
  private:
  int64_t _internal_world_time() const;
  void _internal_set_world_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:WorldAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t world_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zwift_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class EventSubgroupProtobuf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EventSubgroupProtobuf) */ {
 public:
  inline EventSubgroupProtobuf() : EventSubgroupProtobuf(nullptr) {}
  ~EventSubgroupProtobuf() override;
  explicit PROTOBUF_CONSTEXPR EventSubgroupProtobuf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventSubgroupProtobuf(const EventSubgroupProtobuf& from);
  EventSubgroupProtobuf(EventSubgroupProtobuf&& from) noexcept
    : EventSubgroupProtobuf() {
    *this = ::std::move(from);
  }

  inline EventSubgroupProtobuf& operator=(const EventSubgroupProtobuf& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventSubgroupProtobuf& operator=(EventSubgroupProtobuf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventSubgroupProtobuf& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventSubgroupProtobuf* internal_default_instance() {
    return reinterpret_cast<const EventSubgroupProtobuf*>(
               &_EventSubgroupProtobuf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(EventSubgroupProtobuf& a, EventSubgroupProtobuf& b) {
    a.Swap(&b);
  }
  inline void Swap(EventSubgroupProtobuf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventSubgroupProtobuf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventSubgroupProtobuf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventSubgroupProtobuf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventSubgroupProtobuf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventSubgroupProtobuf& from) {
    EventSubgroupProtobuf::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventSubgroupProtobuf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EventSubgroupProtobuf";
  }
  protected:
  explicit EventSubgroupProtobuf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kRulesFieldNumber = 8,
    kRouteFieldNumber = 22,
    kLapsFieldNumber = 25,
    kStartLocationFieldNumber = 29,
    kLabelFieldNumber = 30,
    kPaceTypeFieldNumber = 31,
    kJerseyHashFieldNumber = 36,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 rules = 8;
  void clear_rules();
  int32_t rules() const;
  void set_rules(int32_t value);
  private:
  int32_t _internal_rules() const;
  void _internal_set_rules(int32_t value);
  public:

  // int32 route = 22;
  void clear_route();
  int32_t route() const;
  void set_route(int32_t value);
  private:
  int32_t _internal_route() const;
  void _internal_set_route(int32_t value);
  public:

  // int32 laps = 25;
  void clear_laps();
  int32_t laps() const;
  void set_laps(int32_t value);
  private:
  int32_t _internal_laps() const;
  void _internal_set_laps(int32_t value);
  public:

  // int32 startLocation = 29;
  void clear_startlocation();
  int32_t startlocation() const;
  void set_startlocation(int32_t value);
  private:
  int32_t _internal_startlocation() const;
  void _internal_set_startlocation(int32_t value);
  public:

  // int32 label = 30;
  void clear_label();
  int32_t label() const;
  void set_label(int32_t value);
  private:
  int32_t _internal_label() const;
  void _internal_set_label(int32_t value);
  public:

  // int32 paceType = 31;
  void clear_pacetype();
  int32_t pacetype() const;
  void set_pacetype(int32_t value);
  private:
  int32_t _internal_pacetype() const;
  void _internal_set_pacetype(int32_t value);
  public:

  // int32 jerseyHash = 36;
  void clear_jerseyhash();
  int32_t jerseyhash() const;
  void set_jerseyhash(int32_t value);
  private:
  int32_t _internal_jerseyhash() const;
  void _internal_set_jerseyhash(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:EventSubgroupProtobuf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t id_;
    int32_t rules_;
    int32_t route_;
    int32_t laps_;
    int32_t startlocation_;
    int32_t label_;
    int32_t pacetype_;
    int32_t jerseyhash_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zwift_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class RiderAttributes_AttributeMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RiderAttributes.AttributeMessage) */ {
 public:
  inline RiderAttributes_AttributeMessage() : RiderAttributes_AttributeMessage(nullptr) {}
  ~RiderAttributes_AttributeMessage() override;
  explicit PROTOBUF_CONSTEXPR RiderAttributes_AttributeMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RiderAttributes_AttributeMessage(const RiderAttributes_AttributeMessage& from);
  RiderAttributes_AttributeMessage(RiderAttributes_AttributeMessage&& from) noexcept
    : RiderAttributes_AttributeMessage() {
    *this = ::std::move(from);
  }

  inline RiderAttributes_AttributeMessage& operator=(const RiderAttributes_AttributeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RiderAttributes_AttributeMessage& operator=(RiderAttributes_AttributeMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RiderAttributes_AttributeMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RiderAttributes_AttributeMessage* internal_default_instance() {
    return reinterpret_cast<const RiderAttributes_AttributeMessage*>(
               &_RiderAttributes_AttributeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RiderAttributes_AttributeMessage& a, RiderAttributes_AttributeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RiderAttributes_AttributeMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RiderAttributes_AttributeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RiderAttributes_AttributeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RiderAttributes_AttributeMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RiderAttributes_AttributeMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RiderAttributes_AttributeMessage& from) {
    RiderAttributes_AttributeMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RiderAttributes_AttributeMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RiderAttributes.AttributeMessage";
  }
  protected:
  explicit RiderAttributes_AttributeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 3,
    kLastNameFieldNumber = 4,
    kMyIdFieldNumber = 1,
    kTheirIdFieldNumber = 2,
    kCountryCodeFieldNumber = 5,
  };
  // string firstName = 3;
  void clear_firstname();
  const std::string& firstname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firstname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firstname();
  PROTOBUF_NODISCARD std::string* release_firstname();
  void set_allocated_firstname(std::string* firstname);
  private:
  const std::string& _internal_firstname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstname(const std::string& value);
  std::string* _internal_mutable_firstname();
  public:

  // string lastName = 4;
  void clear_lastname();
  const std::string& lastname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lastname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lastname();
  PROTOBUF_NODISCARD std::string* release_lastname();
  void set_allocated_lastname(std::string* lastname);
  private:
  const std::string& _internal_lastname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lastname(const std::string& value);
  std::string* _internal_mutable_lastname();
  public:

  // int32 myId = 1;
  void clear_myid();
  int32_t myid() const;
  void set_myid(int32_t value);
  private:
  int32_t _internal_myid() const;
  void _internal_set_myid(int32_t value);
  public:

  // int32 theirId = 2;
  void clear_theirid();
  int32_t theirid() const;
  void set_theirid(int32_t value);
  private:
  int32_t _internal_theirid() const;
  void _internal_set_theirid(int32_t value);
  public:

  // int32 countryCode = 5;
  void clear_countrycode();
  int32_t countrycode() const;
  void set_countrycode(int32_t value);
  private:
  int32_t _internal_countrycode() const;
  void _internal_set_countrycode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RiderAttributes.AttributeMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastname_;
    int32_t myid_;
    int32_t theirid_;
    int32_t countrycode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zwift_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class RiderAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RiderAttributes) */ {
 public:
  inline RiderAttributes() : RiderAttributes(nullptr) {}
  ~RiderAttributes() override;
  explicit PROTOBUF_CONSTEXPR RiderAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RiderAttributes(const RiderAttributes& from);
  RiderAttributes(RiderAttributes&& from) noexcept
    : RiderAttributes() {
    *this = ::std::move(from);
  }

  inline RiderAttributes& operator=(const RiderAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RiderAttributes& operator=(RiderAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RiderAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const RiderAttributes* internal_default_instance() {
    return reinterpret_cast<const RiderAttributes*>(
               &_RiderAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RiderAttributes& a, RiderAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(RiderAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RiderAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RiderAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RiderAttributes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RiderAttributes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RiderAttributes& from) {
    RiderAttributes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RiderAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RiderAttributes";
  }
  protected:
  explicit RiderAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RiderAttributes_AttributeMessage AttributeMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeMessageFieldNumber = 4,
    kF2FieldNumber = 2,
    kF3FieldNumber = 3,
    kTheirIdFieldNumber = 10,
    kF13FieldNumber = 13,
  };
  // .RiderAttributes.AttributeMessage attributeMessage = 4;
  bool has_attributemessage() const;
  private:
  bool _internal_has_attributemessage() const;
  public:
  void clear_attributemessage();
  const ::RiderAttributes_AttributeMessage& attributemessage() const;
  PROTOBUF_NODISCARD ::RiderAttributes_AttributeMessage* release_attributemessage();
  ::RiderAttributes_AttributeMessage* mutable_attributemessage();
  void set_allocated_attributemessage(::RiderAttributes_AttributeMessage* attributemessage);
  private:
  const ::RiderAttributes_AttributeMessage& _internal_attributemessage() const;
  ::RiderAttributes_AttributeMessage* _internal_mutable_attributemessage();
  public:
  void unsafe_arena_set_allocated_attributemessage(
      ::RiderAttributes_AttributeMessage* attributemessage);
  ::RiderAttributes_AttributeMessage* unsafe_arena_release_attributemessage();

  // int32 f2 = 2;
  void clear_f2();
  int32_t f2() const;
  void set_f2(int32_t value);
  private:
  int32_t _internal_f2() const;
  void _internal_set_f2(int32_t value);
  public:

  // int32 f3 = 3;
  void clear_f3();
  int32_t f3() const;
  void set_f3(int32_t value);
  private:
  int32_t _internal_f3() const;
  void _internal_set_f3(int32_t value);
  public:

  // int32 theirId = 10;
  void clear_theirid();
  int32_t theirid() const;
  void set_theirid(int32_t value);
  private:
  int32_t _internal_theirid() const;
  void _internal_set_theirid(int32_t value);
  public:

  // int32 f13 = 13;
  void clear_f13();
  int32_t f13() const;
  void set_f13(int32_t value);
  private:
  int32_t _internal_f13() const;
  void _internal_set_f13(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RiderAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::RiderAttributes_AttributeMessage* attributemessage_;
    int32_t f2_;
    int32_t f3_;
    int32_t theirid_;
    int32_t f13_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zwift_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class Profiles final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Profiles) */ {
 public:
  inline Profiles() : Profiles(nullptr) {}
  ~Profiles() override;
  explicit PROTOBUF_CONSTEXPR Profiles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Profiles(const Profiles& from);
  Profiles(Profiles&& from) noexcept
    : Profiles() {
    *this = ::std::move(from);
  }

  inline Profiles& operator=(const Profiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline Profiles& operator=(Profiles&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Profiles& default_instance() {
    return *internal_default_instance();
  }
  static inline const Profiles* internal_default_instance() {
    return reinterpret_cast<const Profiles*>(
               &_Profiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Profiles& a, Profiles& b) {
    a.Swap(&b);
  }
  inline void Swap(Profiles* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Profiles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Profiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Profiles>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Profiles& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Profiles& from) {
    Profiles::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Profiles* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Profiles";
  }
  protected:
  explicit Profiles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfilesFieldNumber = 1,
  };
  // repeated .Profile profiles = 1;
  int profiles_size() const;
  private:
  int _internal_profiles_size() const;
  public:
  void clear_profiles();
  ::Profile* mutable_profiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Profile >*
      mutable_profiles();
  private:
  const ::Profile& _internal_profiles(int index) const;
  ::Profile* _internal_add_profiles();
  public:
  const ::Profile& profiles(int index) const;
  ::Profile* add_profiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Profile >&
      profiles() const;

  // @@protoc_insertion_point(class_scope:Profiles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Profile > profiles_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zwift_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class Profile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Profile) */ {
 public:
  inline Profile() : Profile(nullptr) {}
  ~Profile() override;
  explicit PROTOBUF_CONSTEXPR Profile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Profile(const Profile& from);
  Profile(Profile&& from) noexcept
    : Profile() {
    *this = ::std::move(from);
  }

  inline Profile& operator=(const Profile& from) {
    CopyFrom(from);
    return *this;
  }
  inline Profile& operator=(Profile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Profile& default_instance() {
    return *internal_default_instance();
  }
  static inline const Profile* internal_default_instance() {
    return reinterpret_cast<const Profile*>(
               &_Profile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Profile& a, Profile& b) {
    a.Swap(&b);
  }
  inline void Swap(Profile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Profile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Profile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Profile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Profile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Profile& from) {
    Profile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Profile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Profile";
  }
  protected:
  explicit Profile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 4,
    kLastNameFieldNumber = 5,
    kLaunchedGameClientFieldNumber = 108,
    kIdFieldNumber = 1,
    kMaleFieldNumber = 6,
    kWeightFieldNumber = 9,
    kBodyTypeFieldNumber = 12,
    kCountryCodeFieldNumber = 34,
    kTotalDistanceFieldNumber = 35,
    kTotalDistanceClimbedFieldNumber = 36,
    kTotalTimeInMinutesFieldNumber = 37,
    kTotalWattHoursFieldNumber = 41,
    kHeightFieldNumber = 42,
    kTotalExperiencePointsFieldNumber = 46,
    kAchievementLevelFieldNumber = 49,
    kPowerSourceFieldNumber = 52,
    kAgeFieldNumber = 55,
    kCurrentActivityIdFieldNumber = 109,
  };
  // string firstName = 4;
  void clear_firstname();
  const std::string& firstname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firstname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firstname();
  PROTOBUF_NODISCARD std::string* release_firstname();
  void set_allocated_firstname(std::string* firstname);
  private:
  const std::string& _internal_firstname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstname(const std::string& value);
  std::string* _internal_mutable_firstname();
  public:

  // string lastName = 5;
  void clear_lastname();
  const std::string& lastname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lastname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lastname();
  PROTOBUF_NODISCARD std::string* release_lastname();
  void set_allocated_lastname(std::string* lastname);
  private:
  const std::string& _internal_lastname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lastname(const std::string& value);
  std::string* _internal_mutable_lastname();
  public:

  // string launchedGameClient = 108;
  void clear_launchedgameclient();
  const std::string& launchedgameclient() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_launchedgameclient(ArgT0&& arg0, ArgT... args);
  std::string* mutable_launchedgameclient();
  PROTOBUF_NODISCARD std::string* release_launchedgameclient();
  void set_allocated_launchedgameclient(std::string* launchedgameclient);
  private:
  const std::string& _internal_launchedgameclient() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_launchedgameclient(const std::string& value);
  std::string* _internal_mutable_launchedgameclient();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 male = 6;
  void clear_male();
  int32_t male() const;
  void set_male(int32_t value);
  private:
  int32_t _internal_male() const;
  void _internal_set_male(int32_t value);
  public:

  // int32 weight = 9;
  void clear_weight();
  int32_t weight() const;
  void set_weight(int32_t value);
  private:
  int32_t _internal_weight() const;
  void _internal_set_weight(int32_t value);
  public:

  // int32 bodyType = 12;
  void clear_bodytype();
  int32_t bodytype() const;
  void set_bodytype(int32_t value);
  private:
  int32_t _internal_bodytype() const;
  void _internal_set_bodytype(int32_t value);
  public:

  // int32 countryCode = 34;
  void clear_countrycode();
  int32_t countrycode() const;
  void set_countrycode(int32_t value);
  private:
  int32_t _internal_countrycode() const;
  void _internal_set_countrycode(int32_t value);
  public:

  // int32 totalDistance = 35;
  void clear_totaldistance();
  int32_t totaldistance() const;
  void set_totaldistance(int32_t value);
  private:
  int32_t _internal_totaldistance() const;
  void _internal_set_totaldistance(int32_t value);
  public:

  // int32 totalDistanceClimbed = 36;
  void clear_totaldistanceclimbed();
  int32_t totaldistanceclimbed() const;
  void set_totaldistanceclimbed(int32_t value);
  private:
  int32_t _internal_totaldistanceclimbed() const;
  void _internal_set_totaldistanceclimbed(int32_t value);
  public:

  // int32 totalTimeInMinutes = 37;
  void clear_totaltimeinminutes();
  int32_t totaltimeinminutes() const;
  void set_totaltimeinminutes(int32_t value);
  private:
  int32_t _internal_totaltimeinminutes() const;
  void _internal_set_totaltimeinminutes(int32_t value);
  public:

  // int32 totalWattHours = 41;
  void clear_totalwatthours();
  int32_t totalwatthours() const;
  void set_totalwatthours(int32_t value);
  private:
  int32_t _internal_totalwatthours() const;
  void _internal_set_totalwatthours(int32_t value);
  public:

  // int32 height = 42;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // int32 totalExperiencePoints = 46;
  void clear_totalexperiencepoints();
  int32_t totalexperiencepoints() const;
  void set_totalexperiencepoints(int32_t value);
  private:
  int32_t _internal_totalexperiencepoints() const;
  void _internal_set_totalexperiencepoints(int32_t value);
  public:

  // int32 achievementLevel = 49;
  void clear_achievementlevel();
  int32_t achievementlevel() const;
  void set_achievementlevel(int32_t value);
  private:
  int32_t _internal_achievementlevel() const;
  void _internal_set_achievementlevel(int32_t value);
  public:

  // int32 powerSource = 52;
  void clear_powersource();
  int32_t powersource() const;
  void set_powersource(int32_t value);
  private:
  int32_t _internal_powersource() const;
  void _internal_set_powersource(int32_t value);
  public:

  // int32 age = 55;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // int32 currentActivityId = 109;
  void clear_currentactivityid();
  int32_t currentactivityid() const;
  void set_currentactivityid(int32_t value);
  private:
  int32_t _internal_currentactivityid() const;
  void _internal_set_currentactivityid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Profile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr launchedgameclient_;
    int32_t id_;
    int32_t male_;
    int32_t weight_;
    int32_t bodytype_;
    int32_t countrycode_;
    int32_t totaldistance_;
    int32_t totaldistanceclimbed_;
    int32_t totaltimeinminutes_;
    int32_t totalwatthours_;
    int32_t height_;
    int32_t totalexperiencepoints_;
    int32_t achievementlevel_;
    int32_t powersource_;
    int32_t age_;
    int32_t currentactivityid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_zwift_5fmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerState

// int32 id = 1;
inline void PlayerState::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t PlayerState::_internal_id() const {
  return _impl_.id_;
}
inline int32_t PlayerState::id() const {
  // @@protoc_insertion_point(field_get:PlayerState.id)
  return _internal_id();
}
inline void PlayerState::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void PlayerState::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PlayerState.id)
}

// int64 worldTime = 2;
inline void PlayerState::clear_worldtime() {
  _impl_.worldtime_ = int64_t{0};
}
inline int64_t PlayerState::_internal_worldtime() const {
  return _impl_.worldtime_;
}
inline int64_t PlayerState::worldtime() const {
  // @@protoc_insertion_point(field_get:PlayerState.worldTime)
  return _internal_worldtime();
}
inline void PlayerState::_internal_set_worldtime(int64_t value) {
  
  _impl_.worldtime_ = value;
}
inline void PlayerState::set_worldtime(int64_t value) {
  _internal_set_worldtime(value);
  // @@protoc_insertion_point(field_set:PlayerState.worldTime)
}

// int32 distance = 3;
inline void PlayerState::clear_distance() {
  _impl_.distance_ = 0;
}
inline int32_t PlayerState::_internal_distance() const {
  return _impl_.distance_;
}
inline int32_t PlayerState::distance() const {
  // @@protoc_insertion_point(field_get:PlayerState.distance)
  return _internal_distance();
}
inline void PlayerState::_internal_set_distance(int32_t value) {
  
  _impl_.distance_ = value;
}
inline void PlayerState::set_distance(int32_t value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:PlayerState.distance)
}

// int32 roadTime = 4;
inline void PlayerState::clear_roadtime() {
  _impl_.roadtime_ = 0;
}
inline int32_t PlayerState::_internal_roadtime() const {
  return _impl_.roadtime_;
}
inline int32_t PlayerState::roadtime() const {
  // @@protoc_insertion_point(field_get:PlayerState.roadTime)
  return _internal_roadtime();
}
inline void PlayerState::_internal_set_roadtime(int32_t value) {
  
  _impl_.roadtime_ = value;
}
inline void PlayerState::set_roadtime(int32_t value) {
  _internal_set_roadtime(value);
  // @@protoc_insertion_point(field_set:PlayerState.roadTime)
}

// int32 laps = 5;
inline void PlayerState::clear_laps() {
  _impl_.laps_ = 0;
}
inline int32_t PlayerState::_internal_laps() const {
  return _impl_.laps_;
}
inline int32_t PlayerState::laps() const {
  // @@protoc_insertion_point(field_get:PlayerState.laps)
  return _internal_laps();
}
inline void PlayerState::_internal_set_laps(int32_t value) {
  
  _impl_.laps_ = value;
}
inline void PlayerState::set_laps(int32_t value) {
  _internal_set_laps(value);
  // @@protoc_insertion_point(field_set:PlayerState.laps)
}

// int32 speed = 6;
inline void PlayerState::clear_speed() {
  _impl_.speed_ = 0;
}
inline int32_t PlayerState::_internal_speed() const {
  return _impl_.speed_;
}
inline int32_t PlayerState::speed() const {
  // @@protoc_insertion_point(field_get:PlayerState.speed)
  return _internal_speed();
}
inline void PlayerState::_internal_set_speed(int32_t value) {
  
  _impl_.speed_ = value;
}
inline void PlayerState::set_speed(int32_t value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:PlayerState.speed)
}

// int32 roadPosition = 8;
inline void PlayerState::clear_roadposition() {
  _impl_.roadposition_ = 0;
}
inline int32_t PlayerState::_internal_roadposition() const {
  return _impl_.roadposition_;
}
inline int32_t PlayerState::roadposition() const {
  // @@protoc_insertion_point(field_get:PlayerState.roadPosition)
  return _internal_roadposition();
}
inline void PlayerState::_internal_set_roadposition(int32_t value) {
  
  _impl_.roadposition_ = value;
}
inline void PlayerState::set_roadposition(int32_t value) {
  _internal_set_roadposition(value);
  // @@protoc_insertion_point(field_set:PlayerState.roadPosition)
}

// int32 cadenceUHz = 9;
inline void PlayerState::clear_cadenceuhz() {
  _impl_.cadenceuhz_ = 0;
}
inline int32_t PlayerState::_internal_cadenceuhz() const {
  return _impl_.cadenceuhz_;
}
inline int32_t PlayerState::cadenceuhz() const {
  // @@protoc_insertion_point(field_get:PlayerState.cadenceUHz)
  return _internal_cadenceuhz();
}
inline void PlayerState::_internal_set_cadenceuhz(int32_t value) {
  
  _impl_.cadenceuhz_ = value;
}
inline void PlayerState::set_cadenceuhz(int32_t value) {
  _internal_set_cadenceuhz(value);
  // @@protoc_insertion_point(field_set:PlayerState.cadenceUHz)
}

// int32 heartrate = 11;
inline void PlayerState::clear_heartrate() {
  _impl_.heartrate_ = 0;
}
inline int32_t PlayerState::_internal_heartrate() const {
  return _impl_.heartrate_;
}
inline int32_t PlayerState::heartrate() const {
  // @@protoc_insertion_point(field_get:PlayerState.heartrate)
  return _internal_heartrate();
}
inline void PlayerState::_internal_set_heartrate(int32_t value) {
  
  _impl_.heartrate_ = value;
}
inline void PlayerState::set_heartrate(int32_t value) {
  _internal_set_heartrate(value);
  // @@protoc_insertion_point(field_set:PlayerState.heartrate)
}

// int32 power = 12;
inline void PlayerState::clear_power() {
  _impl_.power_ = 0;
}
inline int32_t PlayerState::_internal_power() const {
  return _impl_.power_;
}
inline int32_t PlayerState::power() const {
  // @@protoc_insertion_point(field_get:PlayerState.power)
  return _internal_power();
}
inline void PlayerState::_internal_set_power(int32_t value) {
  
  _impl_.power_ = value;
}
inline void PlayerState::set_power(int32_t value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:PlayerState.power)
}

// int64 heading = 13;
inline void PlayerState::clear_heading() {
  _impl_.heading_ = int64_t{0};
}
inline int64_t PlayerState::_internal_heading() const {
  return _impl_.heading_;
}
inline int64_t PlayerState::heading() const {
  // @@protoc_insertion_point(field_get:PlayerState.heading)
  return _internal_heading();
}
inline void PlayerState::_internal_set_heading(int64_t value) {
  
  _impl_.heading_ = value;
}
inline void PlayerState::set_heading(int64_t value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:PlayerState.heading)
}

// int32 lean = 14;
inline void PlayerState::clear_lean() {
  _impl_.lean_ = 0;
}
inline int32_t PlayerState::_internal_lean() const {
  return _impl_.lean_;
}
inline int32_t PlayerState::lean() const {
  // @@protoc_insertion_point(field_get:PlayerState.lean)
  return _internal_lean();
}
inline void PlayerState::_internal_set_lean(int32_t value) {
  
  _impl_.lean_ = value;
}
inline void PlayerState::set_lean(int32_t value) {
  _internal_set_lean(value);
  // @@protoc_insertion_point(field_set:PlayerState.lean)
}

// int32 climbing = 15;
inline void PlayerState::clear_climbing() {
  _impl_.climbing_ = 0;
}
inline int32_t PlayerState::_internal_climbing() const {
  return _impl_.climbing_;
}
inline int32_t PlayerState::climbing() const {
  // @@protoc_insertion_point(field_get:PlayerState.climbing)
  return _internal_climbing();
}
inline void PlayerState::_internal_set_climbing(int32_t value) {
  
  _impl_.climbing_ = value;
}
inline void PlayerState::set_climbing(int32_t value) {
  _internal_set_climbing(value);
  // @@protoc_insertion_point(field_set:PlayerState.climbing)
}

// int32 time = 16;
inline void PlayerState::clear_time() {
  _impl_.time_ = 0;
}
inline int32_t PlayerState::_internal_time() const {
  return _impl_.time_;
}
inline int32_t PlayerState::time() const {
  // @@protoc_insertion_point(field_get:PlayerState.time)
  return _internal_time();
}
inline void PlayerState::_internal_set_time(int32_t value) {
  
  _impl_.time_ = value;
}
inline void PlayerState::set_time(int32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:PlayerState.time)
}

// int32 f19 = 19;
inline void PlayerState::clear_f19() {
  _impl_.f19_ = 0;
}
inline int32_t PlayerState::_internal_f19() const {
  return _impl_.f19_;
}
inline int32_t PlayerState::f19() const {
  // @@protoc_insertion_point(field_get:PlayerState.f19)
  return _internal_f19();
}
inline void PlayerState::_internal_set_f19(int32_t value) {
  
  _impl_.f19_ = value;
}
inline void PlayerState::set_f19(int32_t value) {
  _internal_set_f19(value);
  // @@protoc_insertion_point(field_set:PlayerState.f19)
}

// int32 f20 = 20;
inline void PlayerState::clear_f20() {
  _impl_.f20_ = 0;
}
inline int32_t PlayerState::_internal_f20() const {
  return _impl_.f20_;
}
inline int32_t PlayerState::f20() const {
  // @@protoc_insertion_point(field_get:PlayerState.f20)
  return _internal_f20();
}
inline void PlayerState::_internal_set_f20(int32_t value) {
  
  _impl_.f20_ = value;
}
inline void PlayerState::set_f20(int32_t value) {
  _internal_set_f20(value);
  // @@protoc_insertion_point(field_set:PlayerState.f20)
}

// int32 progress = 21;
inline void PlayerState::clear_progress() {
  _impl_.progress_ = 0;
}
inline int32_t PlayerState::_internal_progress() const {
  return _impl_.progress_;
}
inline int32_t PlayerState::progress() const {
  // @@protoc_insertion_point(field_get:PlayerState.progress)
  return _internal_progress();
}
inline void PlayerState::_internal_set_progress(int32_t value) {
  
  _impl_.progress_ = value;
}
inline void PlayerState::set_progress(int32_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:PlayerState.progress)
}

// int64 customisationId = 22;
inline void PlayerState::clear_customisationid() {
  _impl_.customisationid_ = int64_t{0};
}
inline int64_t PlayerState::_internal_customisationid() const {
  return _impl_.customisationid_;
}
inline int64_t PlayerState::customisationid() const {
  // @@protoc_insertion_point(field_get:PlayerState.customisationId)
  return _internal_customisationid();
}
inline void PlayerState::_internal_set_customisationid(int64_t value) {
  
  _impl_.customisationid_ = value;
}
inline void PlayerState::set_customisationid(int64_t value) {
  _internal_set_customisationid(value);
  // @@protoc_insertion_point(field_set:PlayerState.customisationId)
}

// int32 justWatching = 23;
inline void PlayerState::clear_justwatching() {
  _impl_.justwatching_ = 0;
}
inline int32_t PlayerState::_internal_justwatching() const {
  return _impl_.justwatching_;
}
inline int32_t PlayerState::justwatching() const {
  // @@protoc_insertion_point(field_get:PlayerState.justWatching)
  return _internal_justwatching();
}
inline void PlayerState::_internal_set_justwatching(int32_t value) {
  
  _impl_.justwatching_ = value;
}
inline void PlayerState::set_justwatching(int32_t value) {
  _internal_set_justwatching(value);
  // @@protoc_insertion_point(field_set:PlayerState.justWatching)
}

// int32 calories = 24;
inline void PlayerState::clear_calories() {
  _impl_.calories_ = 0;
}
inline int32_t PlayerState::_internal_calories() const {
  return _impl_.calories_;
}
inline int32_t PlayerState::calories() const {
  // @@protoc_insertion_point(field_get:PlayerState.calories)
  return _internal_calories();
}
inline void PlayerState::_internal_set_calories(int32_t value) {
  
  _impl_.calories_ = value;
}
inline void PlayerState::set_calories(int32_t value) {
  _internal_set_calories(value);
  // @@protoc_insertion_point(field_set:PlayerState.calories)
}

// float x = 25;
inline void PlayerState::clear_x() {
  _impl_.x_ = 0;
}
inline float PlayerState::_internal_x() const {
  return _impl_.x_;
}
inline float PlayerState::x() const {
  // @@protoc_insertion_point(field_get:PlayerState.x)
  return _internal_x();
}
inline void PlayerState::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void PlayerState::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:PlayerState.x)
}

// float altitude = 26;
inline void PlayerState::clear_altitude() {
  _impl_.altitude_ = 0;
}
inline float PlayerState::_internal_altitude() const {
  return _impl_.altitude_;
}
inline float PlayerState::altitude() const {
  // @@protoc_insertion_point(field_get:PlayerState.altitude)
  return _internal_altitude();
}
inline void PlayerState::_internal_set_altitude(float value) {
  
  _impl_.altitude_ = value;
}
inline void PlayerState::set_altitude(float value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:PlayerState.altitude)
}

// float y = 27;
inline void PlayerState::clear_y() {
  _impl_.y_ = 0;
}
inline float PlayerState::_internal_y() const {
  return _impl_.y_;
}
inline float PlayerState::y() const {
  // @@protoc_insertion_point(field_get:PlayerState.y)
  return _internal_y();
}
inline void PlayerState::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void PlayerState::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:PlayerState.y)
}

// int32 watchingRiderId = 28;
inline void PlayerState::clear_watchingriderid() {
  _impl_.watchingriderid_ = 0;
}
inline int32_t PlayerState::_internal_watchingriderid() const {
  return _impl_.watchingriderid_;
}
inline int32_t PlayerState::watchingriderid() const {
  // @@protoc_insertion_point(field_get:PlayerState.watchingRiderId)
  return _internal_watchingriderid();
}
inline void PlayerState::_internal_set_watchingriderid(int32_t value) {
  
  _impl_.watchingriderid_ = value;
}
inline void PlayerState::set_watchingriderid(int32_t value) {
  _internal_set_watchingriderid(value);
  // @@protoc_insertion_point(field_set:PlayerState.watchingRiderId)
}

// int32 groupId = 29;
inline void PlayerState::clear_groupid() {
  _impl_.groupid_ = 0;
}
inline int32_t PlayerState::_internal_groupid() const {
  return _impl_.groupid_;
}
inline int32_t PlayerState::groupid() const {
  // @@protoc_insertion_point(field_get:PlayerState.groupId)
  return _internal_groupid();
}
inline void PlayerState::_internal_set_groupid(int32_t value) {
  
  _impl_.groupid_ = value;
}
inline void PlayerState::set_groupid(int32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:PlayerState.groupId)
}

// int64 sport = 31;
inline void PlayerState::clear_sport() {
  _impl_.sport_ = int64_t{0};
}
inline int64_t PlayerState::_internal_sport() const {
  return _impl_.sport_;
}
inline int64_t PlayerState::sport() const {
  // @@protoc_insertion_point(field_get:PlayerState.sport)
  return _internal_sport();
}
inline void PlayerState::_internal_set_sport(int64_t value) {
  
  _impl_.sport_ = value;
}
inline void PlayerState::set_sport(int64_t value) {
  _internal_set_sport(value);
  // @@protoc_insertion_point(field_set:PlayerState.sport)
}

// -------------------------------------------------------------------

// ClientToServer

// int32 connected = 1;
inline void ClientToServer::clear_connected() {
  _impl_.connected_ = 0;
}
inline int32_t ClientToServer::_internal_connected() const {
  return _impl_.connected_;
}
inline int32_t ClientToServer::connected() const {
  // @@protoc_insertion_point(field_get:ClientToServer.connected)
  return _internal_connected();
}
inline void ClientToServer::_internal_set_connected(int32_t value) {
  
  _impl_.connected_ = value;
}
inline void ClientToServer::set_connected(int32_t value) {
  _internal_set_connected(value);
  // @@protoc_insertion_point(field_set:ClientToServer.connected)
}

// int32 rider_id = 2;
inline void ClientToServer::clear_rider_id() {
  _impl_.rider_id_ = 0;
}
inline int32_t ClientToServer::_internal_rider_id() const {
  return _impl_.rider_id_;
}
inline int32_t ClientToServer::rider_id() const {
  // @@protoc_insertion_point(field_get:ClientToServer.rider_id)
  return _internal_rider_id();
}
inline void ClientToServer::_internal_set_rider_id(int32_t value) {
  
  _impl_.rider_id_ = value;
}
inline void ClientToServer::set_rider_id(int32_t value) {
  _internal_set_rider_id(value);
  // @@protoc_insertion_point(field_set:ClientToServer.rider_id)
}

// int64 world_time = 3;
inline void ClientToServer::clear_world_time() {
  _impl_.world_time_ = int64_t{0};
}
inline int64_t ClientToServer::_internal_world_time() const {
  return _impl_.world_time_;
}
inline int64_t ClientToServer::world_time() const {
  // @@protoc_insertion_point(field_get:ClientToServer.world_time)
  return _internal_world_time();
}
inline void ClientToServer::_internal_set_world_time(int64_t value) {
  
  _impl_.world_time_ = value;
}
inline void ClientToServer::set_world_time(int64_t value) {
  _internal_set_world_time(value);
  // @@protoc_insertion_point(field_set:ClientToServer.world_time)
}

// .PlayerState state = 7;
inline bool ClientToServer::_internal_has_state() const {
  return this != internal_default_instance() && _impl_.state_ != nullptr;
}
inline bool ClientToServer::has_state() const {
  return _internal_has_state();
}
inline void ClientToServer::clear_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
}
inline const ::PlayerState& ClientToServer::_internal_state() const {
  const ::PlayerState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlayerState&>(
      ::_PlayerState_default_instance_);
}
inline const ::PlayerState& ClientToServer::state() const {
  // @@protoc_insertion_point(field_get:ClientToServer.state)
  return _internal_state();
}
inline void ClientToServer::unsafe_arena_set_allocated_state(
    ::PlayerState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientToServer.state)
}
inline ::PlayerState* ClientToServer::release_state() {
  
  ::PlayerState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlayerState* ClientToServer::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:ClientToServer.state)
  
  ::PlayerState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::PlayerState* ClientToServer::_internal_mutable_state() {
  
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlayerState>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::PlayerState* ClientToServer::mutable_state() {
  ::PlayerState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:ClientToServer.state)
  return _msg;
}
inline void ClientToServer::set_allocated_state(::PlayerState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:ClientToServer.state)
}

// int32 seqno = 4;
inline void ClientToServer::clear_seqno() {
  _impl_.seqno_ = 0;
}
inline int32_t ClientToServer::_internal_seqno() const {
  return _impl_.seqno_;
}
inline int32_t ClientToServer::seqno() const {
  // @@protoc_insertion_point(field_get:ClientToServer.seqno)
  return _internal_seqno();
}
inline void ClientToServer::_internal_set_seqno(int32_t value) {
  
  _impl_.seqno_ = value;
}
inline void ClientToServer::set_seqno(int32_t value) {
  _internal_set_seqno(value);
  // @@protoc_insertion_point(field_set:ClientToServer.seqno)
}

// int64 tag8 = 8;
inline void ClientToServer::clear_tag8() {
  _impl_.tag8_ = int64_t{0};
}
inline int64_t ClientToServer::_internal_tag8() const {
  return _impl_.tag8_;
}
inline int64_t ClientToServer::tag8() const {
  // @@protoc_insertion_point(field_get:ClientToServer.tag8)
  return _internal_tag8();
}
inline void ClientToServer::_internal_set_tag8(int64_t value) {
  
  _impl_.tag8_ = value;
}
inline void ClientToServer::set_tag8(int64_t value) {
  _internal_set_tag8(value);
  // @@protoc_insertion_point(field_set:ClientToServer.tag8)
}

// int64 tag9 = 9;
inline void ClientToServer::clear_tag9() {
  _impl_.tag9_ = int64_t{0};
}
inline int64_t ClientToServer::_internal_tag9() const {
  return _impl_.tag9_;
}
inline int64_t ClientToServer::tag9() const {
  // @@protoc_insertion_point(field_get:ClientToServer.tag9)
  return _internal_tag9();
}
inline void ClientToServer::_internal_set_tag9(int64_t value) {
  
  _impl_.tag9_ = value;
}
inline void ClientToServer::set_tag9(int64_t value) {
  _internal_set_tag9(value);
  // @@protoc_insertion_point(field_set:ClientToServer.tag9)
}

// int64 last_update = 10;
inline void ClientToServer::clear_last_update() {
  _impl_.last_update_ = int64_t{0};
}
inline int64_t ClientToServer::_internal_last_update() const {
  return _impl_.last_update_;
}
inline int64_t ClientToServer::last_update() const {
  // @@protoc_insertion_point(field_get:ClientToServer.last_update)
  return _internal_last_update();
}
inline void ClientToServer::_internal_set_last_update(int64_t value) {
  
  _impl_.last_update_ = value;
}
inline void ClientToServer::set_last_update(int64_t value) {
  _internal_set_last_update(value);
  // @@protoc_insertion_point(field_set:ClientToServer.last_update)
}

// int64 tag11 = 11;
inline void ClientToServer::clear_tag11() {
  _impl_.tag11_ = int64_t{0};
}
inline int64_t ClientToServer::_internal_tag11() const {
  return _impl_.tag11_;
}
inline int64_t ClientToServer::tag11() const {
  // @@protoc_insertion_point(field_get:ClientToServer.tag11)
  return _internal_tag11();
}
inline void ClientToServer::_internal_set_tag11(int64_t value) {
  
  _impl_.tag11_ = value;
}
inline void ClientToServer::set_tag11(int64_t value) {
  _internal_set_tag11(value);
  // @@protoc_insertion_point(field_set:ClientToServer.tag11)
}

// int64 last_player_update = 12;
inline void ClientToServer::clear_last_player_update() {
  _impl_.last_player_update_ = int64_t{0};
}
inline int64_t ClientToServer::_internal_last_player_update() const {
  return _impl_.last_player_update_;
}
inline int64_t ClientToServer::last_player_update() const {
  // @@protoc_insertion_point(field_get:ClientToServer.last_player_update)
  return _internal_last_player_update();
}
inline void ClientToServer::_internal_set_last_player_update(int64_t value) {
  
  _impl_.last_player_update_ = value;
}
inline void ClientToServer::set_last_player_update(int64_t value) {
  _internal_set_last_player_update(value);
  // @@protoc_insertion_point(field_set:ClientToServer.last_player_update)
}

// -------------------------------------------------------------------

// SegmentResult

// int64 id = 1;
inline void SegmentResult::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t SegmentResult::_internal_id() const {
  return _impl_.id_;
}
inline int64_t SegmentResult::id() const {
  // @@protoc_insertion_point(field_get:SegmentResult.id)
  return _internal_id();
}
inline void SegmentResult::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void SegmentResult::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SegmentResult.id)
}

// int64 rider_id = 2;
inline void SegmentResult::clear_rider_id() {
  _impl_.rider_id_ = int64_t{0};
}
inline int64_t SegmentResult::_internal_rider_id() const {
  return _impl_.rider_id_;
}
inline int64_t SegmentResult::rider_id() const {
  // @@protoc_insertion_point(field_get:SegmentResult.rider_id)
  return _internal_rider_id();
}
inline void SegmentResult::_internal_set_rider_id(int64_t value) {
  
  _impl_.rider_id_ = value;
}
inline void SegmentResult::set_rider_id(int64_t value) {
  _internal_set_rider_id(value);
  // @@protoc_insertion_point(field_set:SegmentResult.rider_id)
}

// int64 event_subgroup_id = 6;
inline void SegmentResult::clear_event_subgroup_id() {
  _impl_.event_subgroup_id_ = int64_t{0};
}
inline int64_t SegmentResult::_internal_event_subgroup_id() const {
  return _impl_.event_subgroup_id_;
}
inline int64_t SegmentResult::event_subgroup_id() const {
  // @@protoc_insertion_point(field_get:SegmentResult.event_subgroup_id)
  return _internal_event_subgroup_id();
}
inline void SegmentResult::_internal_set_event_subgroup_id(int64_t value) {
  
  _impl_.event_subgroup_id_ = value;
}
inline void SegmentResult::set_event_subgroup_id(int64_t value) {
  _internal_set_event_subgroup_id(value);
  // @@protoc_insertion_point(field_set:SegmentResult.event_subgroup_id)
}

// string first_name = 7;
inline void SegmentResult::clear_first_name() {
  _impl_.first_name_.ClearToEmpty();
}
inline const std::string& SegmentResult::first_name() const {
  // @@protoc_insertion_point(field_get:SegmentResult.first_name)
  return _internal_first_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SegmentResult::set_first_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.first_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SegmentResult.first_name)
}
inline std::string* SegmentResult::mutable_first_name() {
  std::string* _s = _internal_mutable_first_name();
  // @@protoc_insertion_point(field_mutable:SegmentResult.first_name)
  return _s;
}
inline const std::string& SegmentResult::_internal_first_name() const {
  return _impl_.first_name_.Get();
}
inline void SegmentResult::_internal_set_first_name(const std::string& value) {
  
  _impl_.first_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SegmentResult::_internal_mutable_first_name() {
  
  return _impl_.first_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SegmentResult::release_first_name() {
  // @@protoc_insertion_point(field_release:SegmentResult.first_name)
  return _impl_.first_name_.Release();
}
inline void SegmentResult::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  _impl_.first_name_.SetAllocated(first_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.first_name_.IsDefault()) {
    _impl_.first_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SegmentResult.first_name)
}

// string last_name = 8;
inline void SegmentResult::clear_last_name() {
  _impl_.last_name_.ClearToEmpty();
}
inline const std::string& SegmentResult::last_name() const {
  // @@protoc_insertion_point(field_get:SegmentResult.last_name)
  return _internal_last_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SegmentResult::set_last_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.last_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SegmentResult.last_name)
}
inline std::string* SegmentResult::mutable_last_name() {
  std::string* _s = _internal_mutable_last_name();
  // @@protoc_insertion_point(field_mutable:SegmentResult.last_name)
  return _s;
}
inline const std::string& SegmentResult::_internal_last_name() const {
  return _impl_.last_name_.Get();
}
inline void SegmentResult::_internal_set_last_name(const std::string& value) {
  
  _impl_.last_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SegmentResult::_internal_mutable_last_name() {
  
  return _impl_.last_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SegmentResult::release_last_name() {
  // @@protoc_insertion_point(field_release:SegmentResult.last_name)
  return _impl_.last_name_.Release();
}
inline void SegmentResult::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  _impl_.last_name_.SetAllocated(last_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.last_name_.IsDefault()) {
    _impl_.last_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SegmentResult.last_name)
}

// string finish_time_str = 10;
inline void SegmentResult::clear_finish_time_str() {
  _impl_.finish_time_str_.ClearToEmpty();
}
inline const std::string& SegmentResult::finish_time_str() const {
  // @@protoc_insertion_point(field_get:SegmentResult.finish_time_str)
  return _internal_finish_time_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SegmentResult::set_finish_time_str(ArgT0&& arg0, ArgT... args) {
 
 _impl_.finish_time_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SegmentResult.finish_time_str)
}
inline std::string* SegmentResult::mutable_finish_time_str() {
  std::string* _s = _internal_mutable_finish_time_str();
  // @@protoc_insertion_point(field_mutable:SegmentResult.finish_time_str)
  return _s;
}
inline const std::string& SegmentResult::_internal_finish_time_str() const {
  return _impl_.finish_time_str_.Get();
}
inline void SegmentResult::_internal_set_finish_time_str(const std::string& value) {
  
  _impl_.finish_time_str_.Set(value, GetArenaForAllocation());
}
inline std::string* SegmentResult::_internal_mutable_finish_time_str() {
  
  return _impl_.finish_time_str_.Mutable(GetArenaForAllocation());
}
inline std::string* SegmentResult::release_finish_time_str() {
  // @@protoc_insertion_point(field_release:SegmentResult.finish_time_str)
  return _impl_.finish_time_str_.Release();
}
inline void SegmentResult::set_allocated_finish_time_str(std::string* finish_time_str) {
  if (finish_time_str != nullptr) {
    
  } else {
    
  }
  _impl_.finish_time_str_.SetAllocated(finish_time_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.finish_time_str_.IsDefault()) {
    _impl_.finish_time_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SegmentResult.finish_time_str)
}

// int64 elapsed_ms = 11;
inline void SegmentResult::clear_elapsed_ms() {
  _impl_.elapsed_ms_ = int64_t{0};
}
inline int64_t SegmentResult::_internal_elapsed_ms() const {
  return _impl_.elapsed_ms_;
}
inline int64_t SegmentResult::elapsed_ms() const {
  // @@protoc_insertion_point(field_get:SegmentResult.elapsed_ms)
  return _internal_elapsed_ms();
}
inline void SegmentResult::_internal_set_elapsed_ms(int64_t value) {
  
  _impl_.elapsed_ms_ = value;
}
inline void SegmentResult::set_elapsed_ms(int64_t value) {
  _internal_set_elapsed_ms(value);
  // @@protoc_insertion_point(field_set:SegmentResult.elapsed_ms)
}

// int32 powermeter = 12;
inline void SegmentResult::clear_powermeter() {
  _impl_.powermeter_ = 0;
}
inline int32_t SegmentResult::_internal_powermeter() const {
  return _impl_.powermeter_;
}
inline int32_t SegmentResult::powermeter() const {
  // @@protoc_insertion_point(field_get:SegmentResult.powermeter)
  return _internal_powermeter();
}
inline void SegmentResult::_internal_set_powermeter(int32_t value) {
  
  _impl_.powermeter_ = value;
}
inline void SegmentResult::set_powermeter(int32_t value) {
  _internal_set_powermeter(value);
  // @@protoc_insertion_point(field_set:SegmentResult.powermeter)
}

// int32 weight = 13;
inline void SegmentResult::clear_weight() {
  _impl_.weight_ = 0;
}
inline int32_t SegmentResult::_internal_weight() const {
  return _impl_.weight_;
}
inline int32_t SegmentResult::weight() const {
  // @@protoc_insertion_point(field_get:SegmentResult.weight)
  return _internal_weight();
}
inline void SegmentResult::_internal_set_weight(int32_t value) {
  
  _impl_.weight_ = value;
}
inline void SegmentResult::set_weight(int32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:SegmentResult.weight)
}

// int32 power = 15;
inline void SegmentResult::clear_power() {
  _impl_.power_ = 0;
}
inline int32_t SegmentResult::_internal_power() const {
  return _impl_.power_;
}
inline int32_t SegmentResult::power() const {
  // @@protoc_insertion_point(field_get:SegmentResult.power)
  return _internal_power();
}
inline void SegmentResult::_internal_set_power(int32_t value) {
  
  _impl_.power_ = value;
}
inline void SegmentResult::set_power(int32_t value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:SegmentResult.power)
}

// int32 heartrate = 19;
inline void SegmentResult::clear_heartrate() {
  _impl_.heartrate_ = 0;
}
inline int32_t SegmentResult::_internal_heartrate() const {
  return _impl_.heartrate_;
}
inline int32_t SegmentResult::heartrate() const {
  // @@protoc_insertion_point(field_get:SegmentResult.heartrate)
  return _internal_heartrate();
}
inline void SegmentResult::_internal_set_heartrate(int32_t value) {
  
  _impl_.heartrate_ = value;
}
inline void SegmentResult::set_heartrate(int32_t value) {
  _internal_set_heartrate(value);
  // @@protoc_insertion_point(field_set:SegmentResult.heartrate)
}

// -------------------------------------------------------------------

// SegmentResults

// int64 world_id = 1;
inline void SegmentResults::clear_world_id() {
  _impl_.world_id_ = int64_t{0};
}
inline int64_t SegmentResults::_internal_world_id() const {
  return _impl_.world_id_;
}
inline int64_t SegmentResults::world_id() const {
  // @@protoc_insertion_point(field_get:SegmentResults.world_id)
  return _internal_world_id();
}
inline void SegmentResults::_internal_set_world_id(int64_t value) {
  
  _impl_.world_id_ = value;
}
inline void SegmentResults::set_world_id(int64_t value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:SegmentResults.world_id)
}

// int64 segment_id = 2;
inline void SegmentResults::clear_segment_id() {
  _impl_.segment_id_ = int64_t{0};
}
inline int64_t SegmentResults::_internal_segment_id() const {
  return _impl_.segment_id_;
}
inline int64_t SegmentResults::segment_id() const {
  // @@protoc_insertion_point(field_get:SegmentResults.segment_id)
  return _internal_segment_id();
}
inline void SegmentResults::_internal_set_segment_id(int64_t value) {
  
  _impl_.segment_id_ = value;
}
inline void SegmentResults::set_segment_id(int64_t value) {
  _internal_set_segment_id(value);
  // @@protoc_insertion_point(field_set:SegmentResults.segment_id)
}

// int64 event_subgroup_id = 3;
inline void SegmentResults::clear_event_subgroup_id() {
  _impl_.event_subgroup_id_ = int64_t{0};
}
inline int64_t SegmentResults::_internal_event_subgroup_id() const {
  return _impl_.event_subgroup_id_;
}
inline int64_t SegmentResults::event_subgroup_id() const {
  // @@protoc_insertion_point(field_get:SegmentResults.event_subgroup_id)
  return _internal_event_subgroup_id();
}
inline void SegmentResults::_internal_set_event_subgroup_id(int64_t value) {
  
  _impl_.event_subgroup_id_ = value;
}
inline void SegmentResults::set_event_subgroup_id(int64_t value) {
  _internal_set_event_subgroup_id(value);
  // @@protoc_insertion_point(field_set:SegmentResults.event_subgroup_id)
}

// repeated .SegmentResult segment_results = 4;
inline int SegmentResults::_internal_segment_results_size() const {
  return _impl_.segment_results_.size();
}
inline int SegmentResults::segment_results_size() const {
  return _internal_segment_results_size();
}
inline void SegmentResults::clear_segment_results() {
  _impl_.segment_results_.Clear();
}
inline ::SegmentResult* SegmentResults::mutable_segment_results(int index) {
  // @@protoc_insertion_point(field_mutable:SegmentResults.segment_results)
  return _impl_.segment_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SegmentResult >*
SegmentResults::mutable_segment_results() {
  // @@protoc_insertion_point(field_mutable_list:SegmentResults.segment_results)
  return &_impl_.segment_results_;
}
inline const ::SegmentResult& SegmentResults::_internal_segment_results(int index) const {
  return _impl_.segment_results_.Get(index);
}
inline const ::SegmentResult& SegmentResults::segment_results(int index) const {
  // @@protoc_insertion_point(field_get:SegmentResults.segment_results)
  return _internal_segment_results(index);
}
inline ::SegmentResult* SegmentResults::_internal_add_segment_results() {
  return _impl_.segment_results_.Add();
}
inline ::SegmentResult* SegmentResults::add_segment_results() {
  ::SegmentResult* _add = _internal_add_segment_results();
  // @@protoc_insertion_point(field_add:SegmentResults.segment_results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SegmentResult >&
SegmentResults::segment_results() const {
  // @@protoc_insertion_point(field_list:SegmentResults.segment_results)
  return _impl_.segment_results_;
}

// -------------------------------------------------------------------

// UnknownMessage1

// -------------------------------------------------------------------

// UnknownMessage

// -------------------------------------------------------------------

// ServerToClient

// int32 tag1 = 1;
inline void ServerToClient::clear_tag1() {
  _impl_.tag1_ = 0;
}
inline int32_t ServerToClient::_internal_tag1() const {
  return _impl_.tag1_;
}
inline int32_t ServerToClient::tag1() const {
  // @@protoc_insertion_point(field_get:ServerToClient.tag1)
  return _internal_tag1();
}
inline void ServerToClient::_internal_set_tag1(int32_t value) {
  
  _impl_.tag1_ = value;
}
inline void ServerToClient::set_tag1(int32_t value) {
  _internal_set_tag1(value);
  // @@protoc_insertion_point(field_set:ServerToClient.tag1)
}

// int32 rider_id = 2;
inline void ServerToClient::clear_rider_id() {
  _impl_.rider_id_ = 0;
}
inline int32_t ServerToClient::_internal_rider_id() const {
  return _impl_.rider_id_;
}
inline int32_t ServerToClient::rider_id() const {
  // @@protoc_insertion_point(field_get:ServerToClient.rider_id)
  return _internal_rider_id();
}
inline void ServerToClient::_internal_set_rider_id(int32_t value) {
  
  _impl_.rider_id_ = value;
}
inline void ServerToClient::set_rider_id(int32_t value) {
  _internal_set_rider_id(value);
  // @@protoc_insertion_point(field_set:ServerToClient.rider_id)
}

// int64 world_time = 3;
inline void ServerToClient::clear_world_time() {
  _impl_.world_time_ = int64_t{0};
}
inline int64_t ServerToClient::_internal_world_time() const {
  return _impl_.world_time_;
}
inline int64_t ServerToClient::world_time() const {
  // @@protoc_insertion_point(field_get:ServerToClient.world_time)
  return _internal_world_time();
}
inline void ServerToClient::_internal_set_world_time(int64_t value) {
  
  _impl_.world_time_ = value;
}
inline void ServerToClient::set_world_time(int64_t value) {
  _internal_set_world_time(value);
  // @@protoc_insertion_point(field_set:ServerToClient.world_time)
}

// int32 seqno = 4;
inline void ServerToClient::clear_seqno() {
  _impl_.seqno_ = 0;
}
inline int32_t ServerToClient::_internal_seqno() const {
  return _impl_.seqno_;
}
inline int32_t ServerToClient::seqno() const {
  // @@protoc_insertion_point(field_get:ServerToClient.seqno)
  return _internal_seqno();
}
inline void ServerToClient::_internal_set_seqno(int32_t value) {
  
  _impl_.seqno_ = value;
}
inline void ServerToClient::set_seqno(int32_t value) {
  _internal_set_seqno(value);
  // @@protoc_insertion_point(field_set:ServerToClient.seqno)
}

// repeated .PlayerState player_states = 8;
inline int ServerToClient::_internal_player_states_size() const {
  return _impl_.player_states_.size();
}
inline int ServerToClient::player_states_size() const {
  return _internal_player_states_size();
}
inline void ServerToClient::clear_player_states() {
  _impl_.player_states_.Clear();
}
inline ::PlayerState* ServerToClient::mutable_player_states(int index) {
  // @@protoc_insertion_point(field_mutable:ServerToClient.player_states)
  return _impl_.player_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerState >*
ServerToClient::mutable_player_states() {
  // @@protoc_insertion_point(field_mutable_list:ServerToClient.player_states)
  return &_impl_.player_states_;
}
inline const ::PlayerState& ServerToClient::_internal_player_states(int index) const {
  return _impl_.player_states_.Get(index);
}
inline const ::PlayerState& ServerToClient::player_states(int index) const {
  // @@protoc_insertion_point(field_get:ServerToClient.player_states)
  return _internal_player_states(index);
}
inline ::PlayerState* ServerToClient::_internal_add_player_states() {
  return _impl_.player_states_.Add();
}
inline ::PlayerState* ServerToClient::add_player_states() {
  ::PlayerState* _add = _internal_add_player_states();
  // @@protoc_insertion_point(field_add:ServerToClient.player_states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlayerState >&
ServerToClient::player_states() const {
  // @@protoc_insertion_point(field_list:ServerToClient.player_states)
  return _impl_.player_states_;
}

// repeated .UnknownMessage player_updates = 9;
inline int ServerToClient::_internal_player_updates_size() const {
  return _impl_.player_updates_.size();
}
inline int ServerToClient::player_updates_size() const {
  return _internal_player_updates_size();
}
inline void ServerToClient::clear_player_updates() {
  _impl_.player_updates_.Clear();
}
inline ::UnknownMessage* ServerToClient::mutable_player_updates(int index) {
  // @@protoc_insertion_point(field_mutable:ServerToClient.player_updates)
  return _impl_.player_updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnknownMessage >*
ServerToClient::mutable_player_updates() {
  // @@protoc_insertion_point(field_mutable_list:ServerToClient.player_updates)
  return &_impl_.player_updates_;
}
inline const ::UnknownMessage& ServerToClient::_internal_player_updates(int index) const {
  return _impl_.player_updates_.Get(index);
}
inline const ::UnknownMessage& ServerToClient::player_updates(int index) const {
  // @@protoc_insertion_point(field_get:ServerToClient.player_updates)
  return _internal_player_updates(index);
}
inline ::UnknownMessage* ServerToClient::_internal_add_player_updates() {
  return _impl_.player_updates_.Add();
}
inline ::UnknownMessage* ServerToClient::add_player_updates() {
  ::UnknownMessage* _add = _internal_add_player_updates();
  // @@protoc_insertion_point(field_add:ServerToClient.player_updates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UnknownMessage >&
ServerToClient::player_updates() const {
  // @@protoc_insertion_point(field_list:ServerToClient.player_updates)
  return _impl_.player_updates_;
}

// int64 tag11 = 11;
inline void ServerToClient::clear_tag11() {
  _impl_.tag11_ = int64_t{0};
}
inline int64_t ServerToClient::_internal_tag11() const {
  return _impl_.tag11_;
}
inline int64_t ServerToClient::tag11() const {
  // @@protoc_insertion_point(field_get:ServerToClient.tag11)
  return _internal_tag11();
}
inline void ServerToClient::_internal_set_tag11(int64_t value) {
  
  _impl_.tag11_ = value;
}
inline void ServerToClient::set_tag11(int64_t value) {
  _internal_set_tag11(value);
  // @@protoc_insertion_point(field_set:ServerToClient.tag11)
}

// int64 tag17 = 17;
inline void ServerToClient::clear_tag17() {
  _impl_.tag17_ = int64_t{0};
}
inline int64_t ServerToClient::_internal_tag17() const {
  return _impl_.tag17_;
}
inline int64_t ServerToClient::tag17() const {
  // @@protoc_insertion_point(field_get:ServerToClient.tag17)
  return _internal_tag17();
}
inline void ServerToClient::_internal_set_tag17(int64_t value) {
  
  _impl_.tag17_ = value;
}
inline void ServerToClient::set_tag17(int64_t value) {
  _internal_set_tag17(value);
  // @@protoc_insertion_point(field_set:ServerToClient.tag17)
}

// int32 num_msgs = 18;
inline void ServerToClient::clear_num_msgs() {
  _impl_.num_msgs_ = 0;
}
inline int32_t ServerToClient::_internal_num_msgs() const {
  return _impl_.num_msgs_;
}
inline int32_t ServerToClient::num_msgs() const {
  // @@protoc_insertion_point(field_get:ServerToClient.num_msgs)
  return _internal_num_msgs();
}
inline void ServerToClient::_internal_set_num_msgs(int32_t value) {
  
  _impl_.num_msgs_ = value;
}
inline void ServerToClient::set_num_msgs(int32_t value) {
  _internal_set_num_msgs(value);
  // @@protoc_insertion_point(field_set:ServerToClient.num_msgs)
}

// int32 msgnum = 19;
inline void ServerToClient::clear_msgnum() {
  _impl_.msgnum_ = 0;
}
inline int32_t ServerToClient::_internal_msgnum() const {
  return _impl_.msgnum_;
}
inline int32_t ServerToClient::msgnum() const {
  // @@protoc_insertion_point(field_get:ServerToClient.msgnum)
  return _internal_msgnum();
}
inline void ServerToClient::_internal_set_msgnum(int32_t value) {
  
  _impl_.msgnum_ = value;
}
inline void ServerToClient::set_msgnum(int32_t value) {
  _internal_set_msgnum(value);
  // @@protoc_insertion_point(field_set:ServerToClient.msgnum)
}

// -------------------------------------------------------------------

// WorldAttributes

// int32 world_id = 1;
inline void WorldAttributes::clear_world_id() {
  _impl_.world_id_ = 0;
}
inline int32_t WorldAttributes::_internal_world_id() const {
  return _impl_.world_id_;
}
inline int32_t WorldAttributes::world_id() const {
  // @@protoc_insertion_point(field_get:WorldAttributes.world_id)
  return _internal_world_id();
}
inline void WorldAttributes::_internal_set_world_id(int32_t value) {
  
  _impl_.world_id_ = value;
}
inline void WorldAttributes::set_world_id(int32_t value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:WorldAttributes.world_id)
}

// string name = 2;
inline void WorldAttributes::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& WorldAttributes::name() const {
  // @@protoc_insertion_point(field_get:WorldAttributes.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorldAttributes::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WorldAttributes.name)
}
inline std::string* WorldAttributes::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:WorldAttributes.name)
  return _s;
}
inline const std::string& WorldAttributes::_internal_name() const {
  return _impl_.name_.Get();
}
inline void WorldAttributes::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* WorldAttributes::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* WorldAttributes::release_name() {
  // @@protoc_insertion_point(field_release:WorldAttributes.name)
  return _impl_.name_.Release();
}
inline void WorldAttributes::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WorldAttributes.name)
}

// int64 tag3 = 3;
inline void WorldAttributes::clear_tag3() {
  _impl_.tag3_ = int64_t{0};
}
inline int64_t WorldAttributes::_internal_tag3() const {
  return _impl_.tag3_;
}
inline int64_t WorldAttributes::tag3() const {
  // @@protoc_insertion_point(field_get:WorldAttributes.tag3)
  return _internal_tag3();
}
inline void WorldAttributes::_internal_set_tag3(int64_t value) {
  
  _impl_.tag3_ = value;
}
inline void WorldAttributes::set_tag3(int64_t value) {
  _internal_set_tag3(value);
  // @@protoc_insertion_point(field_set:WorldAttributes.tag3)
}

// int64 tag5 = 4;
inline void WorldAttributes::clear_tag5() {
  _impl_.tag5_ = int64_t{0};
}
inline int64_t WorldAttributes::_internal_tag5() const {
  return _impl_.tag5_;
}
inline int64_t WorldAttributes::tag5() const {
  // @@protoc_insertion_point(field_get:WorldAttributes.tag5)
  return _internal_tag5();
}
inline void WorldAttributes::_internal_set_tag5(int64_t value) {
  
  _impl_.tag5_ = value;
}
inline void WorldAttributes::set_tag5(int64_t value) {
  _internal_set_tag5(value);
  // @@protoc_insertion_point(field_set:WorldAttributes.tag5)
}

// int64 world_time = 6;
inline void WorldAttributes::clear_world_time() {
  _impl_.world_time_ = int64_t{0};
}
inline int64_t WorldAttributes::_internal_world_time() const {
  return _impl_.world_time_;
}
inline int64_t WorldAttributes::world_time() const {
  // @@protoc_insertion_point(field_get:WorldAttributes.world_time)
  return _internal_world_time();
}
inline void WorldAttributes::_internal_set_world_time(int64_t value) {
  
  _impl_.world_time_ = value;
}
inline void WorldAttributes::set_world_time(int64_t value) {
  _internal_set_world_time(value);
  // @@protoc_insertion_point(field_set:WorldAttributes.world_time)
}

// int64 clock_time = 7;
inline void WorldAttributes::clear_clock_time() {
  _impl_.clock_time_ = int64_t{0};
}
inline int64_t WorldAttributes::_internal_clock_time() const {
  return _impl_.clock_time_;
}
inline int64_t WorldAttributes::clock_time() const {
  // @@protoc_insertion_point(field_get:WorldAttributes.clock_time)
  return _internal_clock_time();
}
inline void WorldAttributes::_internal_set_clock_time(int64_t value) {
  
  _impl_.clock_time_ = value;
}
inline void WorldAttributes::set_clock_time(int64_t value) {
  _internal_set_clock_time(value);
  // @@protoc_insertion_point(field_set:WorldAttributes.clock_time)
}

// -------------------------------------------------------------------

// WorldAttribute

// int64 world_time = 2;
inline void WorldAttribute::clear_world_time() {
  _impl_.world_time_ = int64_t{0};
}
inline int64_t WorldAttribute::_internal_world_time() const {
  return _impl_.world_time_;
}
inline int64_t WorldAttribute::world_time() const {
  // @@protoc_insertion_point(field_get:WorldAttribute.world_time)
  return _internal_world_time();
}
inline void WorldAttribute::_internal_set_world_time(int64_t value) {
  
  _impl_.world_time_ = value;
}
inline void WorldAttribute::set_world_time(int64_t value) {
  _internal_set_world_time(value);
  // @@protoc_insertion_point(field_set:WorldAttribute.world_time)
}

// -------------------------------------------------------------------

// EventSubgroupProtobuf

// int32 id = 1;
inline void EventSubgroupProtobuf::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t EventSubgroupProtobuf::_internal_id() const {
  return _impl_.id_;
}
inline int32_t EventSubgroupProtobuf::id() const {
  // @@protoc_insertion_point(field_get:EventSubgroupProtobuf.id)
  return _internal_id();
}
inline void EventSubgroupProtobuf::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void EventSubgroupProtobuf::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:EventSubgroupProtobuf.id)
}

// string name = 2;
inline void EventSubgroupProtobuf::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EventSubgroupProtobuf::name() const {
  // @@protoc_insertion_point(field_get:EventSubgroupProtobuf.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EventSubgroupProtobuf::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EventSubgroupProtobuf.name)
}
inline std::string* EventSubgroupProtobuf::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:EventSubgroupProtobuf.name)
  return _s;
}
inline const std::string& EventSubgroupProtobuf::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EventSubgroupProtobuf::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EventSubgroupProtobuf::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EventSubgroupProtobuf::release_name() {
  // @@protoc_insertion_point(field_release:EventSubgroupProtobuf.name)
  return _impl_.name_.Release();
}
inline void EventSubgroupProtobuf::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EventSubgroupProtobuf.name)
}

// int32 rules = 8;
inline void EventSubgroupProtobuf::clear_rules() {
  _impl_.rules_ = 0;
}
inline int32_t EventSubgroupProtobuf::_internal_rules() const {
  return _impl_.rules_;
}
inline int32_t EventSubgroupProtobuf::rules() const {
  // @@protoc_insertion_point(field_get:EventSubgroupProtobuf.rules)
  return _internal_rules();
}
inline void EventSubgroupProtobuf::_internal_set_rules(int32_t value) {
  
  _impl_.rules_ = value;
}
inline void EventSubgroupProtobuf::set_rules(int32_t value) {
  _internal_set_rules(value);
  // @@protoc_insertion_point(field_set:EventSubgroupProtobuf.rules)
}

// int32 route = 22;
inline void EventSubgroupProtobuf::clear_route() {
  _impl_.route_ = 0;
}
inline int32_t EventSubgroupProtobuf::_internal_route() const {
  return _impl_.route_;
}
inline int32_t EventSubgroupProtobuf::route() const {
  // @@protoc_insertion_point(field_get:EventSubgroupProtobuf.route)
  return _internal_route();
}
inline void EventSubgroupProtobuf::_internal_set_route(int32_t value) {
  
  _impl_.route_ = value;
}
inline void EventSubgroupProtobuf::set_route(int32_t value) {
  _internal_set_route(value);
  // @@protoc_insertion_point(field_set:EventSubgroupProtobuf.route)
}

// int32 laps = 25;
inline void EventSubgroupProtobuf::clear_laps() {
  _impl_.laps_ = 0;
}
inline int32_t EventSubgroupProtobuf::_internal_laps() const {
  return _impl_.laps_;
}
inline int32_t EventSubgroupProtobuf::laps() const {
  // @@protoc_insertion_point(field_get:EventSubgroupProtobuf.laps)
  return _internal_laps();
}
inline void EventSubgroupProtobuf::_internal_set_laps(int32_t value) {
  
  _impl_.laps_ = value;
}
inline void EventSubgroupProtobuf::set_laps(int32_t value) {
  _internal_set_laps(value);
  // @@protoc_insertion_point(field_set:EventSubgroupProtobuf.laps)
}

// int32 startLocation = 29;
inline void EventSubgroupProtobuf::clear_startlocation() {
  _impl_.startlocation_ = 0;
}
inline int32_t EventSubgroupProtobuf::_internal_startlocation() const {
  return _impl_.startlocation_;
}
inline int32_t EventSubgroupProtobuf::startlocation() const {
  // @@protoc_insertion_point(field_get:EventSubgroupProtobuf.startLocation)
  return _internal_startlocation();
}
inline void EventSubgroupProtobuf::_internal_set_startlocation(int32_t value) {
  
  _impl_.startlocation_ = value;
}
inline void EventSubgroupProtobuf::set_startlocation(int32_t value) {
  _internal_set_startlocation(value);
  // @@protoc_insertion_point(field_set:EventSubgroupProtobuf.startLocation)
}

// int32 label = 30;
inline void EventSubgroupProtobuf::clear_label() {
  _impl_.label_ = 0;
}
inline int32_t EventSubgroupProtobuf::_internal_label() const {
  return _impl_.label_;
}
inline int32_t EventSubgroupProtobuf::label() const {
  // @@protoc_insertion_point(field_get:EventSubgroupProtobuf.label)
  return _internal_label();
}
inline void EventSubgroupProtobuf::_internal_set_label(int32_t value) {
  
  _impl_.label_ = value;
}
inline void EventSubgroupProtobuf::set_label(int32_t value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:EventSubgroupProtobuf.label)
}

// int32 paceType = 31;
inline void EventSubgroupProtobuf::clear_pacetype() {
  _impl_.pacetype_ = 0;
}
inline int32_t EventSubgroupProtobuf::_internal_pacetype() const {
  return _impl_.pacetype_;
}
inline int32_t EventSubgroupProtobuf::pacetype() const {
  // @@protoc_insertion_point(field_get:EventSubgroupProtobuf.paceType)
  return _internal_pacetype();
}
inline void EventSubgroupProtobuf::_internal_set_pacetype(int32_t value) {
  
  _impl_.pacetype_ = value;
}
inline void EventSubgroupProtobuf::set_pacetype(int32_t value) {
  _internal_set_pacetype(value);
  // @@protoc_insertion_point(field_set:EventSubgroupProtobuf.paceType)
}

// int32 jerseyHash = 36;
inline void EventSubgroupProtobuf::clear_jerseyhash() {
  _impl_.jerseyhash_ = 0;
}
inline int32_t EventSubgroupProtobuf::_internal_jerseyhash() const {
  return _impl_.jerseyhash_;
}
inline int32_t EventSubgroupProtobuf::jerseyhash() const {
  // @@protoc_insertion_point(field_get:EventSubgroupProtobuf.jerseyHash)
  return _internal_jerseyhash();
}
inline void EventSubgroupProtobuf::_internal_set_jerseyhash(int32_t value) {
  
  _impl_.jerseyhash_ = value;
}
inline void EventSubgroupProtobuf::set_jerseyhash(int32_t value) {
  _internal_set_jerseyhash(value);
  // @@protoc_insertion_point(field_set:EventSubgroupProtobuf.jerseyHash)
}

// -------------------------------------------------------------------

// RiderAttributes_AttributeMessage

// int32 myId = 1;
inline void RiderAttributes_AttributeMessage::clear_myid() {
  _impl_.myid_ = 0;
}
inline int32_t RiderAttributes_AttributeMessage::_internal_myid() const {
  return _impl_.myid_;
}
inline int32_t RiderAttributes_AttributeMessage::myid() const {
  // @@protoc_insertion_point(field_get:RiderAttributes.AttributeMessage.myId)
  return _internal_myid();
}
inline void RiderAttributes_AttributeMessage::_internal_set_myid(int32_t value) {
  
  _impl_.myid_ = value;
}
inline void RiderAttributes_AttributeMessage::set_myid(int32_t value) {
  _internal_set_myid(value);
  // @@protoc_insertion_point(field_set:RiderAttributes.AttributeMessage.myId)
}

// int32 theirId = 2;
inline void RiderAttributes_AttributeMessage::clear_theirid() {
  _impl_.theirid_ = 0;
}
inline int32_t RiderAttributes_AttributeMessage::_internal_theirid() const {
  return _impl_.theirid_;
}
inline int32_t RiderAttributes_AttributeMessage::theirid() const {
  // @@protoc_insertion_point(field_get:RiderAttributes.AttributeMessage.theirId)
  return _internal_theirid();
}
inline void RiderAttributes_AttributeMessage::_internal_set_theirid(int32_t value) {
  
  _impl_.theirid_ = value;
}
inline void RiderAttributes_AttributeMessage::set_theirid(int32_t value) {
  _internal_set_theirid(value);
  // @@protoc_insertion_point(field_set:RiderAttributes.AttributeMessage.theirId)
}

// string firstName = 3;
inline void RiderAttributes_AttributeMessage::clear_firstname() {
  _impl_.firstname_.ClearToEmpty();
}
inline const std::string& RiderAttributes_AttributeMessage::firstname() const {
  // @@protoc_insertion_point(field_get:RiderAttributes.AttributeMessage.firstName)
  return _internal_firstname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RiderAttributes_AttributeMessage::set_firstname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.firstname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RiderAttributes.AttributeMessage.firstName)
}
inline std::string* RiderAttributes_AttributeMessage::mutable_firstname() {
  std::string* _s = _internal_mutable_firstname();
  // @@protoc_insertion_point(field_mutable:RiderAttributes.AttributeMessage.firstName)
  return _s;
}
inline const std::string& RiderAttributes_AttributeMessage::_internal_firstname() const {
  return _impl_.firstname_.Get();
}
inline void RiderAttributes_AttributeMessage::_internal_set_firstname(const std::string& value) {
  
  _impl_.firstname_.Set(value, GetArenaForAllocation());
}
inline std::string* RiderAttributes_AttributeMessage::_internal_mutable_firstname() {
  
  return _impl_.firstname_.Mutable(GetArenaForAllocation());
}
inline std::string* RiderAttributes_AttributeMessage::release_firstname() {
  // @@protoc_insertion_point(field_release:RiderAttributes.AttributeMessage.firstName)
  return _impl_.firstname_.Release();
}
inline void RiderAttributes_AttributeMessage::set_allocated_firstname(std::string* firstname) {
  if (firstname != nullptr) {
    
  } else {
    
  }
  _impl_.firstname_.SetAllocated(firstname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.firstname_.IsDefault()) {
    _impl_.firstname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RiderAttributes.AttributeMessage.firstName)
}

// string lastName = 4;
inline void RiderAttributes_AttributeMessage::clear_lastname() {
  _impl_.lastname_.ClearToEmpty();
}
inline const std::string& RiderAttributes_AttributeMessage::lastname() const {
  // @@protoc_insertion_point(field_get:RiderAttributes.AttributeMessage.lastName)
  return _internal_lastname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RiderAttributes_AttributeMessage::set_lastname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lastname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RiderAttributes.AttributeMessage.lastName)
}
inline std::string* RiderAttributes_AttributeMessage::mutable_lastname() {
  std::string* _s = _internal_mutable_lastname();
  // @@protoc_insertion_point(field_mutable:RiderAttributes.AttributeMessage.lastName)
  return _s;
}
inline const std::string& RiderAttributes_AttributeMessage::_internal_lastname() const {
  return _impl_.lastname_.Get();
}
inline void RiderAttributes_AttributeMessage::_internal_set_lastname(const std::string& value) {
  
  _impl_.lastname_.Set(value, GetArenaForAllocation());
}
inline std::string* RiderAttributes_AttributeMessage::_internal_mutable_lastname() {
  
  return _impl_.lastname_.Mutable(GetArenaForAllocation());
}
inline std::string* RiderAttributes_AttributeMessage::release_lastname() {
  // @@protoc_insertion_point(field_release:RiderAttributes.AttributeMessage.lastName)
  return _impl_.lastname_.Release();
}
inline void RiderAttributes_AttributeMessage::set_allocated_lastname(std::string* lastname) {
  if (lastname != nullptr) {
    
  } else {
    
  }
  _impl_.lastname_.SetAllocated(lastname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lastname_.IsDefault()) {
    _impl_.lastname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RiderAttributes.AttributeMessage.lastName)
}

// int32 countryCode = 5;
inline void RiderAttributes_AttributeMessage::clear_countrycode() {
  _impl_.countrycode_ = 0;
}
inline int32_t RiderAttributes_AttributeMessage::_internal_countrycode() const {
  return _impl_.countrycode_;
}
inline int32_t RiderAttributes_AttributeMessage::countrycode() const {
  // @@protoc_insertion_point(field_get:RiderAttributes.AttributeMessage.countryCode)
  return _internal_countrycode();
}
inline void RiderAttributes_AttributeMessage::_internal_set_countrycode(int32_t value) {
  
  _impl_.countrycode_ = value;
}
inline void RiderAttributes_AttributeMessage::set_countrycode(int32_t value) {
  _internal_set_countrycode(value);
  // @@protoc_insertion_point(field_set:RiderAttributes.AttributeMessage.countryCode)
}

// -------------------------------------------------------------------

// RiderAttributes

// int32 f2 = 2;
inline void RiderAttributes::clear_f2() {
  _impl_.f2_ = 0;
}
inline int32_t RiderAttributes::_internal_f2() const {
  return _impl_.f2_;
}
inline int32_t RiderAttributes::f2() const {
  // @@protoc_insertion_point(field_get:RiderAttributes.f2)
  return _internal_f2();
}
inline void RiderAttributes::_internal_set_f2(int32_t value) {
  
  _impl_.f2_ = value;
}
inline void RiderAttributes::set_f2(int32_t value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:RiderAttributes.f2)
}

// int32 f3 = 3;
inline void RiderAttributes::clear_f3() {
  _impl_.f3_ = 0;
}
inline int32_t RiderAttributes::_internal_f3() const {
  return _impl_.f3_;
}
inline int32_t RiderAttributes::f3() const {
  // @@protoc_insertion_point(field_get:RiderAttributes.f3)
  return _internal_f3();
}
inline void RiderAttributes::_internal_set_f3(int32_t value) {
  
  _impl_.f3_ = value;
}
inline void RiderAttributes::set_f3(int32_t value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:RiderAttributes.f3)
}

// .RiderAttributes.AttributeMessage attributeMessage = 4;
inline bool RiderAttributes::_internal_has_attributemessage() const {
  return this != internal_default_instance() && _impl_.attributemessage_ != nullptr;
}
inline bool RiderAttributes::has_attributemessage() const {
  return _internal_has_attributemessage();
}
inline void RiderAttributes::clear_attributemessage() {
  if (GetArenaForAllocation() == nullptr && _impl_.attributemessage_ != nullptr) {
    delete _impl_.attributemessage_;
  }
  _impl_.attributemessage_ = nullptr;
}
inline const ::RiderAttributes_AttributeMessage& RiderAttributes::_internal_attributemessage() const {
  const ::RiderAttributes_AttributeMessage* p = _impl_.attributemessage_;
  return p != nullptr ? *p : reinterpret_cast<const ::RiderAttributes_AttributeMessage&>(
      ::_RiderAttributes_AttributeMessage_default_instance_);
}
inline const ::RiderAttributes_AttributeMessage& RiderAttributes::attributemessage() const {
  // @@protoc_insertion_point(field_get:RiderAttributes.attributeMessage)
  return _internal_attributemessage();
}
inline void RiderAttributes::unsafe_arena_set_allocated_attributemessage(
    ::RiderAttributes_AttributeMessage* attributemessage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributemessage_);
  }
  _impl_.attributemessage_ = attributemessage;
  if (attributemessage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RiderAttributes.attributeMessage)
}
inline ::RiderAttributes_AttributeMessage* RiderAttributes::release_attributemessage() {
  
  ::RiderAttributes_AttributeMessage* temp = _impl_.attributemessage_;
  _impl_.attributemessage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RiderAttributes_AttributeMessage* RiderAttributes::unsafe_arena_release_attributemessage() {
  // @@protoc_insertion_point(field_release:RiderAttributes.attributeMessage)
  
  ::RiderAttributes_AttributeMessage* temp = _impl_.attributemessage_;
  _impl_.attributemessage_ = nullptr;
  return temp;
}
inline ::RiderAttributes_AttributeMessage* RiderAttributes::_internal_mutable_attributemessage() {
  
  if (_impl_.attributemessage_ == nullptr) {
    auto* p = CreateMaybeMessage<::RiderAttributes_AttributeMessage>(GetArenaForAllocation());
    _impl_.attributemessage_ = p;
  }
  return _impl_.attributemessage_;
}
inline ::RiderAttributes_AttributeMessage* RiderAttributes::mutable_attributemessage() {
  ::RiderAttributes_AttributeMessage* _msg = _internal_mutable_attributemessage();
  // @@protoc_insertion_point(field_mutable:RiderAttributes.attributeMessage)
  return _msg;
}
inline void RiderAttributes::set_allocated_attributemessage(::RiderAttributes_AttributeMessage* attributemessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attributemessage_;
  }
  if (attributemessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attributemessage);
    if (message_arena != submessage_arena) {
      attributemessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributemessage, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attributemessage_ = attributemessage;
  // @@protoc_insertion_point(field_set_allocated:RiderAttributes.attributeMessage)
}

// int32 theirId = 10;
inline void RiderAttributes::clear_theirid() {
  _impl_.theirid_ = 0;
}
inline int32_t RiderAttributes::_internal_theirid() const {
  return _impl_.theirid_;
}
inline int32_t RiderAttributes::theirid() const {
  // @@protoc_insertion_point(field_get:RiderAttributes.theirId)
  return _internal_theirid();
}
inline void RiderAttributes::_internal_set_theirid(int32_t value) {
  
  _impl_.theirid_ = value;
}
inline void RiderAttributes::set_theirid(int32_t value) {
  _internal_set_theirid(value);
  // @@protoc_insertion_point(field_set:RiderAttributes.theirId)
}

// int32 f13 = 13;
inline void RiderAttributes::clear_f13() {
  _impl_.f13_ = 0;
}
inline int32_t RiderAttributes::_internal_f13() const {
  return _impl_.f13_;
}
inline int32_t RiderAttributes::f13() const {
  // @@protoc_insertion_point(field_get:RiderAttributes.f13)
  return _internal_f13();
}
inline void RiderAttributes::_internal_set_f13(int32_t value) {
  
  _impl_.f13_ = value;
}
inline void RiderAttributes::set_f13(int32_t value) {
  _internal_set_f13(value);
  // @@protoc_insertion_point(field_set:RiderAttributes.f13)
}

// -------------------------------------------------------------------

// Profiles

// repeated .Profile profiles = 1;
inline int Profiles::_internal_profiles_size() const {
  return _impl_.profiles_.size();
}
inline int Profiles::profiles_size() const {
  return _internal_profiles_size();
}
inline void Profiles::clear_profiles() {
  _impl_.profiles_.Clear();
}
inline ::Profile* Profiles::mutable_profiles(int index) {
  // @@protoc_insertion_point(field_mutable:Profiles.profiles)
  return _impl_.profiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Profile >*
Profiles::mutable_profiles() {
  // @@protoc_insertion_point(field_mutable_list:Profiles.profiles)
  return &_impl_.profiles_;
}
inline const ::Profile& Profiles::_internal_profiles(int index) const {
  return _impl_.profiles_.Get(index);
}
inline const ::Profile& Profiles::profiles(int index) const {
  // @@protoc_insertion_point(field_get:Profiles.profiles)
  return _internal_profiles(index);
}
inline ::Profile* Profiles::_internal_add_profiles() {
  return _impl_.profiles_.Add();
}
inline ::Profile* Profiles::add_profiles() {
  ::Profile* _add = _internal_add_profiles();
  // @@protoc_insertion_point(field_add:Profiles.profiles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Profile >&
Profiles::profiles() const {
  // @@protoc_insertion_point(field_list:Profiles.profiles)
  return _impl_.profiles_;
}

// -------------------------------------------------------------------

// Profile

// int32 id = 1;
inline void Profile::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Profile::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Profile::id() const {
  // @@protoc_insertion_point(field_get:Profile.id)
  return _internal_id();
}
inline void Profile::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Profile::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Profile.id)
}

// string firstName = 4;
inline void Profile::clear_firstname() {
  _impl_.firstname_.ClearToEmpty();
}
inline const std::string& Profile::firstname() const {
  // @@protoc_insertion_point(field_get:Profile.firstName)
  return _internal_firstname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Profile::set_firstname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.firstname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Profile.firstName)
}
inline std::string* Profile::mutable_firstname() {
  std::string* _s = _internal_mutable_firstname();
  // @@protoc_insertion_point(field_mutable:Profile.firstName)
  return _s;
}
inline const std::string& Profile::_internal_firstname() const {
  return _impl_.firstname_.Get();
}
inline void Profile::_internal_set_firstname(const std::string& value) {
  
  _impl_.firstname_.Set(value, GetArenaForAllocation());
}
inline std::string* Profile::_internal_mutable_firstname() {
  
  return _impl_.firstname_.Mutable(GetArenaForAllocation());
}
inline std::string* Profile::release_firstname() {
  // @@protoc_insertion_point(field_release:Profile.firstName)
  return _impl_.firstname_.Release();
}
inline void Profile::set_allocated_firstname(std::string* firstname) {
  if (firstname != nullptr) {
    
  } else {
    
  }
  _impl_.firstname_.SetAllocated(firstname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.firstname_.IsDefault()) {
    _impl_.firstname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Profile.firstName)
}

// string lastName = 5;
inline void Profile::clear_lastname() {
  _impl_.lastname_.ClearToEmpty();
}
inline const std::string& Profile::lastname() const {
  // @@protoc_insertion_point(field_get:Profile.lastName)
  return _internal_lastname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Profile::set_lastname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lastname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Profile.lastName)
}
inline std::string* Profile::mutable_lastname() {
  std::string* _s = _internal_mutable_lastname();
  // @@protoc_insertion_point(field_mutable:Profile.lastName)
  return _s;
}
inline const std::string& Profile::_internal_lastname() const {
  return _impl_.lastname_.Get();
}
inline void Profile::_internal_set_lastname(const std::string& value) {
  
  _impl_.lastname_.Set(value, GetArenaForAllocation());
}
inline std::string* Profile::_internal_mutable_lastname() {
  
  return _impl_.lastname_.Mutable(GetArenaForAllocation());
}
inline std::string* Profile::release_lastname() {
  // @@protoc_insertion_point(field_release:Profile.lastName)
  return _impl_.lastname_.Release();
}
inline void Profile::set_allocated_lastname(std::string* lastname) {
  if (lastname != nullptr) {
    
  } else {
    
  }
  _impl_.lastname_.SetAllocated(lastname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lastname_.IsDefault()) {
    _impl_.lastname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Profile.lastName)
}

// int32 male = 6;
inline void Profile::clear_male() {
  _impl_.male_ = 0;
}
inline int32_t Profile::_internal_male() const {
  return _impl_.male_;
}
inline int32_t Profile::male() const {
  // @@protoc_insertion_point(field_get:Profile.male)
  return _internal_male();
}
inline void Profile::_internal_set_male(int32_t value) {
  
  _impl_.male_ = value;
}
inline void Profile::set_male(int32_t value) {
  _internal_set_male(value);
  // @@protoc_insertion_point(field_set:Profile.male)
}

// int32 weight = 9;
inline void Profile::clear_weight() {
  _impl_.weight_ = 0;
}
inline int32_t Profile::_internal_weight() const {
  return _impl_.weight_;
}
inline int32_t Profile::weight() const {
  // @@protoc_insertion_point(field_get:Profile.weight)
  return _internal_weight();
}
inline void Profile::_internal_set_weight(int32_t value) {
  
  _impl_.weight_ = value;
}
inline void Profile::set_weight(int32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:Profile.weight)
}

// int32 bodyType = 12;
inline void Profile::clear_bodytype() {
  _impl_.bodytype_ = 0;
}
inline int32_t Profile::_internal_bodytype() const {
  return _impl_.bodytype_;
}
inline int32_t Profile::bodytype() const {
  // @@protoc_insertion_point(field_get:Profile.bodyType)
  return _internal_bodytype();
}
inline void Profile::_internal_set_bodytype(int32_t value) {
  
  _impl_.bodytype_ = value;
}
inline void Profile::set_bodytype(int32_t value) {
  _internal_set_bodytype(value);
  // @@protoc_insertion_point(field_set:Profile.bodyType)
}

// int32 countryCode = 34;
inline void Profile::clear_countrycode() {
  _impl_.countrycode_ = 0;
}
inline int32_t Profile::_internal_countrycode() const {
  return _impl_.countrycode_;
}
inline int32_t Profile::countrycode() const {
  // @@protoc_insertion_point(field_get:Profile.countryCode)
  return _internal_countrycode();
}
inline void Profile::_internal_set_countrycode(int32_t value) {
  
  _impl_.countrycode_ = value;
}
inline void Profile::set_countrycode(int32_t value) {
  _internal_set_countrycode(value);
  // @@protoc_insertion_point(field_set:Profile.countryCode)
}

// int32 totalDistance = 35;
inline void Profile::clear_totaldistance() {
  _impl_.totaldistance_ = 0;
}
inline int32_t Profile::_internal_totaldistance() const {
  return _impl_.totaldistance_;
}
inline int32_t Profile::totaldistance() const {
  // @@protoc_insertion_point(field_get:Profile.totalDistance)
  return _internal_totaldistance();
}
inline void Profile::_internal_set_totaldistance(int32_t value) {
  
  _impl_.totaldistance_ = value;
}
inline void Profile::set_totaldistance(int32_t value) {
  _internal_set_totaldistance(value);
  // @@protoc_insertion_point(field_set:Profile.totalDistance)
}

// int32 totalDistanceClimbed = 36;
inline void Profile::clear_totaldistanceclimbed() {
  _impl_.totaldistanceclimbed_ = 0;
}
inline int32_t Profile::_internal_totaldistanceclimbed() const {
  return _impl_.totaldistanceclimbed_;
}
inline int32_t Profile::totaldistanceclimbed() const {
  // @@protoc_insertion_point(field_get:Profile.totalDistanceClimbed)
  return _internal_totaldistanceclimbed();
}
inline void Profile::_internal_set_totaldistanceclimbed(int32_t value) {
  
  _impl_.totaldistanceclimbed_ = value;
}
inline void Profile::set_totaldistanceclimbed(int32_t value) {
  _internal_set_totaldistanceclimbed(value);
  // @@protoc_insertion_point(field_set:Profile.totalDistanceClimbed)
}

// int32 totalTimeInMinutes = 37;
inline void Profile::clear_totaltimeinminutes() {
  _impl_.totaltimeinminutes_ = 0;
}
inline int32_t Profile::_internal_totaltimeinminutes() const {
  return _impl_.totaltimeinminutes_;
}
inline int32_t Profile::totaltimeinminutes() const {
  // @@protoc_insertion_point(field_get:Profile.totalTimeInMinutes)
  return _internal_totaltimeinminutes();
}
inline void Profile::_internal_set_totaltimeinminutes(int32_t value) {
  
  _impl_.totaltimeinminutes_ = value;
}
inline void Profile::set_totaltimeinminutes(int32_t value) {
  _internal_set_totaltimeinminutes(value);
  // @@protoc_insertion_point(field_set:Profile.totalTimeInMinutes)
}

// int32 totalWattHours = 41;
inline void Profile::clear_totalwatthours() {
  _impl_.totalwatthours_ = 0;
}
inline int32_t Profile::_internal_totalwatthours() const {
  return _impl_.totalwatthours_;
}
inline int32_t Profile::totalwatthours() const {
  // @@protoc_insertion_point(field_get:Profile.totalWattHours)
  return _internal_totalwatthours();
}
inline void Profile::_internal_set_totalwatthours(int32_t value) {
  
  _impl_.totalwatthours_ = value;
}
inline void Profile::set_totalwatthours(int32_t value) {
  _internal_set_totalwatthours(value);
  // @@protoc_insertion_point(field_set:Profile.totalWattHours)
}

// int32 height = 42;
inline void Profile::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t Profile::_internal_height() const {
  return _impl_.height_;
}
inline int32_t Profile::height() const {
  // @@protoc_insertion_point(field_get:Profile.height)
  return _internal_height();
}
inline void Profile::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void Profile::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Profile.height)
}

// int32 totalExperiencePoints = 46;
inline void Profile::clear_totalexperiencepoints() {
  _impl_.totalexperiencepoints_ = 0;
}
inline int32_t Profile::_internal_totalexperiencepoints() const {
  return _impl_.totalexperiencepoints_;
}
inline int32_t Profile::totalexperiencepoints() const {
  // @@protoc_insertion_point(field_get:Profile.totalExperiencePoints)
  return _internal_totalexperiencepoints();
}
inline void Profile::_internal_set_totalexperiencepoints(int32_t value) {
  
  _impl_.totalexperiencepoints_ = value;
}
inline void Profile::set_totalexperiencepoints(int32_t value) {
  _internal_set_totalexperiencepoints(value);
  // @@protoc_insertion_point(field_set:Profile.totalExperiencePoints)
}

// int32 achievementLevel = 49;
inline void Profile::clear_achievementlevel() {
  _impl_.achievementlevel_ = 0;
}
inline int32_t Profile::_internal_achievementlevel() const {
  return _impl_.achievementlevel_;
}
inline int32_t Profile::achievementlevel() const {
  // @@protoc_insertion_point(field_get:Profile.achievementLevel)
  return _internal_achievementlevel();
}
inline void Profile::_internal_set_achievementlevel(int32_t value) {
  
  _impl_.achievementlevel_ = value;
}
inline void Profile::set_achievementlevel(int32_t value) {
  _internal_set_achievementlevel(value);
  // @@protoc_insertion_point(field_set:Profile.achievementLevel)
}

// int32 powerSource = 52;
inline void Profile::clear_powersource() {
  _impl_.powersource_ = 0;
}
inline int32_t Profile::_internal_powersource() const {
  return _impl_.powersource_;
}
inline int32_t Profile::powersource() const {
  // @@protoc_insertion_point(field_get:Profile.powerSource)
  return _internal_powersource();
}
inline void Profile::_internal_set_powersource(int32_t value) {
  
  _impl_.powersource_ = value;
}
inline void Profile::set_powersource(int32_t value) {
  _internal_set_powersource(value);
  // @@protoc_insertion_point(field_set:Profile.powerSource)
}

// int32 age = 55;
inline void Profile::clear_age() {
  _impl_.age_ = 0;
}
inline int32_t Profile::_internal_age() const {
  return _impl_.age_;
}
inline int32_t Profile::age() const {
  // @@protoc_insertion_point(field_get:Profile.age)
  return _internal_age();
}
inline void Profile::_internal_set_age(int32_t value) {
  
  _impl_.age_ = value;
}
inline void Profile::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:Profile.age)
}

// string launchedGameClient = 108;
inline void Profile::clear_launchedgameclient() {
  _impl_.launchedgameclient_.ClearToEmpty();
}
inline const std::string& Profile::launchedgameclient() const {
  // @@protoc_insertion_point(field_get:Profile.launchedGameClient)
  return _internal_launchedgameclient();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Profile::set_launchedgameclient(ArgT0&& arg0, ArgT... args) {
 
 _impl_.launchedgameclient_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Profile.launchedGameClient)
}
inline std::string* Profile::mutable_launchedgameclient() {
  std::string* _s = _internal_mutable_launchedgameclient();
  // @@protoc_insertion_point(field_mutable:Profile.launchedGameClient)
  return _s;
}
inline const std::string& Profile::_internal_launchedgameclient() const {
  return _impl_.launchedgameclient_.Get();
}
inline void Profile::_internal_set_launchedgameclient(const std::string& value) {
  
  _impl_.launchedgameclient_.Set(value, GetArenaForAllocation());
}
inline std::string* Profile::_internal_mutable_launchedgameclient() {
  
  return _impl_.launchedgameclient_.Mutable(GetArenaForAllocation());
}
inline std::string* Profile::release_launchedgameclient() {
  // @@protoc_insertion_point(field_release:Profile.launchedGameClient)
  return _impl_.launchedgameclient_.Release();
}
inline void Profile::set_allocated_launchedgameclient(std::string* launchedgameclient) {
  if (launchedgameclient != nullptr) {
    
  } else {
    
  }
  _impl_.launchedgameclient_.SetAllocated(launchedgameclient, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.launchedgameclient_.IsDefault()) {
    _impl_.launchedgameclient_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Profile.launchedGameClient)
}

// int32 currentActivityId = 109;
inline void Profile::clear_currentactivityid() {
  _impl_.currentactivityid_ = 0;
}
inline int32_t Profile::_internal_currentactivityid() const {
  return _impl_.currentactivityid_;
}
inline int32_t Profile::currentactivityid() const {
  // @@protoc_insertion_point(field_get:Profile.currentActivityId)
  return _internal_currentactivityid();
}
inline void Profile::_internal_set_currentactivityid(int32_t value) {
  
  _impl_.currentactivityid_ = value;
}
inline void Profile::set_currentactivityid(int32_t value) {
  _internal_set_currentactivityid(value);
  // @@protoc_insertion_point(field_set:Profile.currentActivityId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zwift_5fmessages_2eproto
